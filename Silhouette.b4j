AppType=JavaFX
Build1=Default,b4j.example
File1=apiparamfiller.bjl
File10=LangaugePairSelector.bjl
File11=langcodes.txt
File12=LeftSplitPane.bjl
File13=LineEditor.bjl
File14=ListView.bjl
File15=main.bjl
File16=modelPreference.bjl
File17=MTSetting.bjl
File18=PlayControl.bjl
File19=pretranslate.bjl
File2=APISetting.bjl
File20=progress.bjl
File21=projectSetting.bjl
File22=TopRightSplitPane.bjl
File23=TopSplitPane.bjl
File24=TranslationAssist.bjl
File25=TranslationMemory.bjl
File26=VideoPlayer.bjl
File27=WaveForm.bjl
File3=BottomSplitPane.bjl
File4=Editor.bjl
File5=ErrorReporter.bjl
File6=ExportOptions.bjl
File7=generalSettings.bjl
File8=inputbox.bjl
File9=JumpOptions.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=abplugin
Library10=jreflection
Library11=jshell
Library12=json
Library13=jxui
Library14=xcustomlistview
Library15=xui views
Library16=jrandomaccessfile
Library2=b4xcollections
Library3=b4xtable
Library4=byteconverter
Library5=encryption
Library6=javaobject
Library7=jcore
Library8=jfx
Library9=jokhttputils2
Module1=APIParamsFiller
Module10=jVLC
Module11=LanguagePairSelector
Module12=MT
Module13=PlayControlForm
Module14=Preferences
Module15=preTranslateDialog
Module16=progressDialog
Module17=Project
Module18=ProjectSettings
Module19=SrtParser
Module2=ASR
Module20=Utils
Module21=WaveFormBitmapCreator
Module22=WavRandomAccessFile
Module3=DraggableRange
Module4=ErrorReporter
Module5=Exporter
Module6=ExportOptions
Module7=FFMpeg
Module8=InputBox
Module9=JumpOptions
NumberOfFiles=27
NumberOfLibraries=16
NumberOfModules=22
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
	#VirtualMachineArgs: --add-opens javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
#End Region

#AdditionalJar: jna-5.16.0
#AdditionalJar: slf4j-api-1.7.10
#AdditionalJar: jna-platform-5.16.0
#AdditionalJar: vlcj-4.8.3
#AdditionalJar: vlcj-javafx-1.2.0
#AdditionalJar: vlcj-natives-4.8.3
#AdditionalJar: sqlite-jdbc-3.43.0.0

Sub Process_Globals
	Public prefPath As String = File.Combine(File.DirData("Silhouette"),"preferences.conf")
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private vlc As jVLC
	Private MenuBar1 As MenuBar
	Private MainPane As Pane
	Private EditorSplitPane As SplitPane
	Private VLCPane As Pane
	Private PlayButton As Button
	Private ProgressSlider As Slider
	Private VolSlider As Slider
	Private ProgressLabel As Label
	Private TotalTimeLabel As Label
	Private ProgressTimer As Timer
	Private ProgressContextMenu As ContextMenu
	Private WaveFormContextMenu As ContextMenu
	Private RightClickTarget As Node
	Private BottomSplitPane As SplitPane
	Private TopSplitPane As SplitPane
	Private TopRightSplitPane As SplitPane
	Private SourceTextArea As TextArea
	Private TargetTextArea As TextArea
	Private LinesTable As B4XTable
	Private currentProject As Project
	Private tableCM As ContextMenu
	Private robot As JavaObject
	Private selectedRowID As Int = -1
	Private expectedEndTime As Int = -1
	Private segmentLength As Int = 30
	Private EndTimeTextField As TextField
	Private StartTimeTextField As TextField
	Private StartColumn As B4XTableColumn
	Private EndColumn As B4XTableColumn
	Private SourceColumn As B4XTableColumn
	Private TargetColumn As B4XTableColumn
	Private focusedTimeTextField As TextField
	Private AssistTabPane As TabPane
	Private TMTableView As TableView
	Private TMTextArea As TextArea
	Public plugin As ABPlugin
	Private isLongClick As Boolean = False
	Private VLCImageView As ImageView
	Private OverviewWaveFormImageView As ImageView
	Private WaveFormImageView As ImageView
	Private waveFormCreator As WaveFormBitmapCreator
	Private overviewRange As DraggableRange
	Private cutDurationMs As Long
	Private cutStartTimeMs As Long
	Private timestampRange As DraggableRange
	Private AudioProgressLabel As Label
	Private EnableWaveFormCheckBox As CheckBox
	Private PlayControl As PlayControlForm
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main")
	MainForm.WindowWidth = 800
	MainForm.Show
	MainPane.LoadLayout("Editor")
	EditorSplitPane.LoadLayout("TopSplitPane")
	EditorSplitPane.LoadLayout("BottomSplitPane")
	EditorSplitPane.Vertical = True
	TopSplitPane.LoadLayout("VideoPlayer")
	TopSplitPane.LoadLayout("TopRightSplitPane")
	TopSplitPane.DividerPositions = Array As Double(0.8,0.2)
	TopRightSplitPane.LoadLayout("WaveForm")
	TopRightSplitPane.LoadLayout("LineEditor")
	TopRightSplitPane.Vertical = True
	BottomSplitPane.LoadLayout("ListView")
	BottomSplitPane.LoadLayout("TranslationAssist")
	AssistTabPane.LoadLayout("TranslationMemory","Translation")
	TMTableView.SetColumnWidth(0,50)
	TMTableView.SetColumnWidth(1,50)
	TMTableView.SetColumnWidth(2,200)
	TMTableView.SetColumnWidth(3,100)
	vlc.Initialize(VLCImageView)
	VLCImageView.PreserveRatio = True
	
	ProgressTimer.Initialize("ProgressTimer",100)
	ProgressTimer.Enabled = False
	tableCM.Initialize("tableCM")
	For Each text As String In Array("Play this line","Delete this line","Prepend a line","Append a line","Merge with the next line","Recognize this line")
		Dim mi As MenuItem
		mi.Initialize(text,"tableMenuItem")
		tableCM.MenuItems.Add(mi)
	Next
	robot = robot.InitializeStatic("com.sun.glass.ui.Application").RunMethodJO("GetApplication",Null).RunMethodJO("createRobot",Null)
	Dim jo As JavaObject = ProgressSlider
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mousemoved", Null)
	jo.RunMethod("setOnMouseMoved", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseclicked", Null)
	jo.RunMethod("setOnMouseClicked", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseexited", Null)
	jo.RunMethod("setOnMouseExited", Array(e))
	ProgressSlider.tag = False
	ProgressContextMenu.Initialize("ProgressContextMenu")
	WaveFormContextMenu.Initialize("WaveFormContextMenu")
	SetTable
	loadPlugins
	AddWaveFormControls
End Sub

Private Sub AddWaveFormControls
	Dim overviewPane As Pane = overviewRange.Initialize(Me,"overviewRange")
	Dim timestampRangePane As Pane = timestampRange.Initialize(Me,"timestampRange")
	Dim parent As Pane = OverviewWaveFormImageView.Parent
	parent.AddNode(overviewPane,OverviewWaveFormImageView.Left,OverviewWaveFormImageView.Top,OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height)
	parent.AddNode(timestampRangePane,WaveFormImageView.Left,WaveFormImageView.top,WaveFormImageView.width,WaveFormImageView.Height)
End Sub


'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
    Dim reporter As ErrorReporter
	reporter.Initialize
	reporter.ShowAndWait("error: "&Error.Message&CRLF&"StackTrace: "&StackTrace)
	Return False
End Sub


Public Sub loadPlugins
	Dim dir As String
	dir=File.Combine(File.DirApp,"plugins")
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

private Sub SetTable
	LinesTable.HeaderFont = xui.CreateFont(fx.DefaultFont(15),15)
	LinesTable.HeadersHeight = 30dip
	LinesTable.RowHeight = 30dip
	Dim NumberColumn As B4XTableColumn = LinesTable.AddColumn("No.", LinesTable.COLUMN_TYPE_TEXT)
	NumberColumn.Width = 80dip
	NumberColumn.Sortable = False
	StartColumn = LinesTable.AddColumn("Start", LinesTable.COLUMN_TYPE_TEXT)
	StartColumn.Width = 105dip
	StartColumn.Sortable = False
	EndColumn = LinesTable.AddColumn("End", LinesTable.COLUMN_TYPE_TEXT)
	EndColumn.Width = 105dip
	EndColumn.Sortable = False
	SourceColumn = LinesTable.AddColumn("Source", LinesTable.COLUMN_TYPE_TEXT)
	SourceColumn.Sortable = False
	TargetColumn = LinesTable.AddColumn("Target", LinesTable.COLUMN_TYPE_TEXT)
	TargetColumn.Sortable = False
	LinesTable.SearchVisible = False
	LinesTable.SelectionColor = xui.Color_Transparent
End Sub

Private Sub GetTimeLabelText(totalSeconds As Long) As String
	Dim minutes As Int =  Floor(totalSeconds / 60)
	Dim seconds As Int = totalSeconds - minutes*60
	Return NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Private Sub MenuBar1_Action
	Dim mi As MenuItem = Sender
	Select mi.Text
		Case "_Open Media File"
			OpenFile
		Case "_Save"
			Save
		Case "_Close"
			Close
		Case "_Preferences"
			ShowPreferences
		Case "_Recognize Speech"
			RecognizeSpeech
		Case "_Pretranslate"
			Dim dialog As preTranslateDialog
			dialog.Initialize
			Dim options As Map = dialog.ShowAndWait
			pretranslate(options)
		Case "_New Line"
			NewLine
		Case "_Jump to Line"
			JumpToLine
		Case "Jump to the line of the current _time"
			JumpToLineOfCurrentTime
		Case "_Settings"
			Dim ps As ProjectSettings
			ps.Initialize(currentProject)
			ps.show
		Case "import from _srt"
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			ImportFromSRT(path)
			LoadLinesToTable
			fx.Msgbox(MainForm,"Done","")
		Case "export to _srt"
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowSave(MainForm)
			Exporter.ExportToSRT(currentProject.lines,path)
			fx.Msgbox(MainForm,"Done","")
		Case "_Exit"
			ExitApp
		Case "_About"
			fx.Msgbox(MainForm,"@xulihang, 2025","Silhouette")
	End Select
End Sub

Private Sub ShowPreferences As Preferences
	Dim pref As Preferences
	pref.Initialize(MenuBar1)
	pref.Show
	Return pref
End Sub

Private Sub JumpToLineOfCurrentTime
	Dim timeMs As Long = vlc.GetTime
	Dim index As Int = 1
	index = 1
	For Each line As Map In currentProject.lines
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		If timeMs < startTimeMs Then
			Exit
		End If
		index = index + 1
	Next
	index = Min(currentProject.lines.Size,index)
	JumpToRow(index)
End Sub

Private Sub JumpToLine
	Dim optionsForm As JumpOptions
	optionsForm.Initialize
	Dim options As Map = optionsForm.ShowAndWait
	Dim index As Int = 1
	If options.ContainsKey("index") Then
		index= options.Get("index")
	else if options.ContainsKey("time") Then
		Dim time As String = options.Get("time")
		Dim timeMs As Long = Utils.GetMillisecondsFromTimeString(time)
		index = 1
		For Each line As Map In currentProject.lines
			Dim startTime As String = line.Get("startTime")
			Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
			If timeMs < startTimeMs Then
				Exit
			End If
			index = index + 1
		Next
		index = Min(currentProject.lines.Size,index)
	End If
	JumpToRow(index)
End Sub

Private Sub JumpToRow(rowID As Int)
	ResetSelectStatusOfLineTable
	Dim pageIndex As Int = Ceil(rowID / LinesTable.RowsPerPage)
	LinesTable.CurrentPage = pageIndex
	Sleep(500)
	SelectRow(rowID,False)
End Sub

Private Sub ConvertToWav(parent As String,filename As String, tmpDir As String) As ResumableSub
	If File.Exists(tmpDir,"audio.wav") = False Then
		progressDialog.Show("Converting to audio...")
		progressDialog.update2("Processing...")
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
		progressDialog.close
	End If
	If File.Exists(tmpDir,"segment-00000.wav") = False Then
		progressDialog.Show("Splitting audio...")
		Log("split wav...")
		Wait For (FFMpeg.SplitWav(segmentLength,tmpDir,"audio.wav")) Complete (done As Object)
		Log("split wav done")
		progressDialog.close
	End If
	Return ""
End Sub

Private Sub RecognizeSpeech
	If currentProject.IsInitialized=False Then
		Return
	End If
	If HasValidateModel=False Then
		Dim response As Int = fx.Msgbox2(MainForm,"No models found","","Go to perferences","","Close",fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchTab(2)
		End If
		Return
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	
	Dim files As List = File.ListFiles(tmpDir)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	progressDialog.Show("Recognizing audio...")
	Dim index As Int = 1
	For Each filename As String In wavFiles
		Log(index & "/" & wavFiles.Size)
		Dim purename As String = Utils.GetFilenameWithoutExtension(filename)
		'stored as "segment-00000.srt" or "segment-00000.wav.srt"
		If File.Exists(tmpDir,purename&".srt") = False And File.Exists(tmpDir,filename&".srt") = False Then
			progressDialog.update(index,wavFiles.Size)
			Dim wavpath As String = File.Combine(tmpDir,filename)
			Wait For (ASR.RecognizeWav(wavpath,currentProject.SourceLang)) Complete (done As Object)
		End If
		index = index + 1
	Next
	progressDialog.close
	LoadSRTToProject
	LoadLinesToTable
End Sub

Private Sub LoadSRTToProject
	Dim parser As SrtParser
	parser.Initialize
	Dim dir As String = currentProject.GetTmpFolder
	Dim files As List = File.ListFiles(dir)
	currentProject.Clear
	Dim index As Int = 0
	Dim srtFiles As List
	srtFiles.Initialize
	For Each filename As String In files
		If filename.EndsWith(".srt") Then
			srtFiles.Add(filename)
		End If
	Next
	If srtFiles.Size>0 Then
		srtFiles = SortedSRTFiles(srtFiles)
	End If
	For Each filename As String In srtFiles
		Dim offsetMS As Int = index * segmentLength * 1000
		Dim content As String = File.ReadString(dir,filename)
		content = Utils.RemoveBOM(content)
		Dim lines As List = parser.Parse(content)
		For Each line As SpeechLine In lines
			Dim startTime As String = Utils.ShiftTimeString(line.startTime,offsetMS)
			Dim endTime As String = Utils.ShiftTimeString(line.endTime,offsetMS)
			currentProject.AddLine(startTime,endTime,line.text,"")
		Next
		index = index + 1
	Next
End Sub

Private Sub SortedSRTFiles(srtFiles As List) As List
	Dim firstFilename As String = srtFiles.Get(0)
	Dim newFilesList As List
	newFilesList.Initialize
	For i = 0 To srtFiles.Size-1
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("segment-")
		sb.Append(NumberFormat(i,5,0).Replace(",",""))
		If firstFilename.Contains(".wav") Then
			sb.Append(".wav")
		End If
		sb.Append(".srt")
		newFilesList.Add(sb.ToString)
	Next
	Return newFilesList
End Sub

Private Sub ImportFromSRT(path As String)
	Dim parser As SrtParser
	parser.Initialize
	currentProject.Clear
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	Dim lines As List = parser.Parse(content)
	For Each line As SpeechLine In lines
		Dim startTime As String = line.startTime
		Dim endTime As String = line.endTime
		currentProject.AddLine(startTime,endTime,line.text,"")
	Next
End Sub

Private Sub LoadLinesToTable
	Dim data As List
	data.Initialize
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		index = index + 1
		Dim row(5) As String
		row(0) = index.As(String)
		row(1) = line.Get("startTime")
		row(2) = line.Get("endTime")
		row(3) = line.Get("source")
		row(4) = line.Get("target")
		data.Add(row)
	Next
	LinesTable.SetData(data)
End Sub

Sub LinesTable_CellClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,False)
End Sub

Sub LinesTable_CellLongClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,True)
	Dim col As B4XTableColumn = LinesTable.GetColumn(ColumnId)
	Dim i As Int = LinesTable.VisibleRowIds.IndexOf(RowId)
	Dim cell As B4XView = col.CellsLayouts.Get(i)
	Dim jo As JavaObject = tableCM '<--------------------------- global ContextMenu object
	Dim x As Double = robot.RunMethod("getMouseX",Null)' <----- global JavaObject object
	Dim y As Double = robot.RunMethod("getMouseY",Null)
	If Utils.DetectOS = "mac" Then
		Dim m As Map = Utils.GetScreenPosition(cell)
		x = m.Get("x") + cell.Width/2
		y = m.Get("y") + cell.Height/2
	End If
	jo.RunMethod("show", Array(cell, x, y))
End Sub

Private Sub ResetSelectStatusOfLineTable
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If i Mod 2 = 0 Then
				pnl.Color = LinesTable.EvenRowColor
			Else
				pnl.Color = LinesTable.OddRowColor
			End If
		Next
	Next
End Sub

Sub SelectRow(targetRowId As Int,fromLongClick As Boolean)    'rowid-1
	Dim color As Int = xui.Color_RGB(119,198,255)
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		Dim RowId As Long = LinesTable.VisibleRowIds.Get(i)
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If RowId = targetRowId Then
				pnl.Color=color
			Else
				If i Mod 2 = 0 Then
					pnl.Color = LinesTable.EvenRowColor
				Else
					pnl.Color = LinesTable.OddRowColor
				End If
			End If
		Next
	Next
	selectedRowID = targetRowId
	LoadLineToEditor(fromLongClick)
	If ReadyToDrawWaveForm Then
		DrawWaveForm
		SetTheRangeForTheSelectedRow
	End If
End Sub

Private Sub SetTheRangeForTheSelectedRow
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim endTime As String = line.get("endTime")
	Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(endTime)
	Dim cutStartTimePercent As Double = (startTimeMs - cutStartTimeMs) / cutDurationMs
	Dim cutEndTimePercent As Double = (endTimeMs - cutStartTimeMs) / cutDurationMs
	overviewRange.setProgress(cutStartTimePercent,cutEndTimePercent)
	overviewRange.TriggerRangeChanged
	timestampRange.setProgress(0,1)
End Sub

Private Sub ReadyToDrawWaveForm As Boolean
	Return currentProject.IsInitialized And selectedRowID <> - 1 And EnableWaveFormCheckBox.Checked
End Sub

Private Sub WaveFormPane_Resize (Width As Double, Height As Double)
	timestampRange.Pane.SetSize(Width,Height/4*3)
	overviewRange.Pane.Top = Height/4*3
	overviewRange.Pane.SetSize(Width,Height/4)
	If ReadyToDrawWaveForm Then
		DrawWaveForm
	End If
End Sub

Private Sub GetWaveFilesToDraw As List
	Dim waveFilesToDraw As List
	waveFilesToDraw.Initialize
	Dim files As List = File.ListFiles(currentProject.GetTmpFolder)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim ms As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim wavIndex As Int = ms/1000/30
	Dim hasPrevious As Boolean
	If wavFiles.Size>0 Then
		If wavIndex - 1 >=0 Then
			hasPrevious = True
			waveFilesToDraw.Add(wavFiles.Get(wavIndex - 1))
		End If
		If wavIndex < wavFiles.Size Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex))
		End If
		If wavIndex + 1 <= wavFiles.Size - 1 Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex + 1))
		End If
	End If
	If hasPrevious Then
		cutStartTimeMs = (wavIndex-1) * 30 * 1000
	Else
		cutStartTimeMs = wavIndex * 30 * 1000
	End If
	Return waveFilesToDraw
End Sub

Private Sub DrawWaveForm
	Log("DrawWaveForm")
	InitializeWaveFormCreatorIfNeeded
	waveFormCreator.StartIndex = 0
	waveFormCreator.EndIndex = waveFormCreator.SampleLength - 1
	OverviewWaveFormImageView.SetImage(waveFormCreator.Draw(OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height))
End Sub

Private Sub ClearWaveForm
	Dim waveFormCreator As WaveFormBitmapCreator
	OverviewWaveFormImageView.SetImage(Null)
	WaveFormImageView.SetImage(Null)
End Sub

Private Sub InitializeWaveFormCreatorIfNeeded
	Dim waveFiles As List = GetWaveFilesToDraw
	If waveFormCreator.IsInitialized Then
		Log("waveform creator initialized")
		Dim needReload As Boolean = False
		If waveFormCreator.Tag Is List Then
			Dim prevousList As List = waveFormCreator.Tag
			If prevousList.Get(0) <> waveFiles.Get(0) Then
				needReload = True
			End If
		End If
		If needReload Then
			Log("reinit waveform creator")
			waveFormCreator.Initialize(LoadDataFromWaveFiles(waveFiles))
			waveFormCreator.Tag = waveFiles
		End If
	Else
		waveFormCreator.Initialize(LoadDataFromWaveFiles(waveFiles))
		waveFormCreator.Tag = waveFiles
	End If
End Sub

Private Sub LoadDataFromWaveFiles(waveFiles As List) As Short()
	Dim totalDuration As Int = 0
	Dim bytesArray As List
	bytesArray.Initialize
	For Each filename As String In waveFiles
		Log(filename)
		Dim wavRaf As WavRandomAccessFile
		wavRaf.Initialize(currentProject.GetTmpFolder,filename)
		totalDuration = totalDuration + wavRaf.Duration_ms
		bytesArray.Add(wavRaf.DataBytes)
	Next
	Dim jointBytes() As Byte = Utils.JoinBytes(bytesArray)
	Dim jointShorts() As Short = Utils.getDataShortsFromBytes(jointBytes)
	cutDurationMs = totalDuration
	Return jointShorts
End Sub

Private Sub overviewRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		waveFormCreator.StartIndex = startProgress*waveFormCreator.SampleLength
		waveFormCreator.EndIndex = Min(endProgress*waveFormCreator.SampleLength, waveFormCreator.SampleLength - 1)
		WaveFormImageView.SetImage(waveFormCreator.Draw(WaveFormImageView.Width,WaveFormImageView.Height))
		Dim overViewStartTime As Long  = startProgress * cutDurationMs
		Dim overViewEndTime As Long = endProgress * cutDurationMs
		Dim clipTime As Long = overViewEndTime - overViewStartTime
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
		Dim endTime As Long = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
		Dim newStartProgress As Double = (startTime - overViewStartTime -cutStartTimeMs) / clipTime
		Dim newEndProgress As Double = (endTime - overViewStartTime -cutStartTimeMs) / clipTime
		timestampRange.setProgress(newStartProgress,newEndProgress)
	End If
End Sub

Private Sub timestampRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime -startTime
		Dim clipStartTime As Long = clipTime * startProgress + startTime + cutStartTimeMs
		Dim clipEndTime As Long = clipTime * endProgress + startTime + cutStartTimeMs
		StartTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipStartTime)
		EndTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipEndTime)
	End If
End Sub

Private Sub overviewRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim time As Long  = mouseMoveProgress * cutDurationMs + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(time)
	End If
End Sub

Private Sub timestampRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime - startTime
		Dim clipMouseMoveTime As Long = clipTime * mouseMoveProgress + startTime + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(clipMouseMoveTime)
	End If
End Sub

Sub pretranslate(options As Map) As ResumableSub
	If options.Get("type")<>"" Then
		If options.Get("type")="MT" Then
			Dim sourceLang As String
			Dim targetLang As String
			Dim mtengine As String=options.Get("engine")
			sourceLang=currentProject.SourceLang
			targetLang=currentProject.TargetLang
			Dim interval As Int=options.GetDefault("interval",0)
			progressDialog.Show("translating...")
			Dim index As Int = 0
			For Each line As Map In currentProject.lines
				index = index + 1
				progressDialog.update(index,currentProject.lines.Size)
				If progressDialog.isShowing = False Then
					Exit
				End If
				Dim source As String = line.Get("source")
				Dim target As String = line.Get("target")
				If target = "" Then
					wait for (MT.getMT(source,sourceLang,targetLang,mtengine)) complete (target As String)
					line.Put("target",target)
					Sleep(interval)
				End If
			Next
			progressDialog.close
		Else
			fx.Msgbox(MainForm,"Not supported now","")
		End If
	End If
	LoadLinesToTable
	Return ""
End Sub

Private Sub Save
	If currentProject.IsInitialized Then
		currentProject.save
	End If
End Sub

Private Sub Close
	StopPlaying
	LinesTable.SetData(Array())
	selectedRowID = -1
	ResetSelectStatusOfLineTable
	ClearWaveForm
	Dim currentProject As Project
End Sub

Private Sub OpenFile
	Dim fc As FileChooser
	fc.Initialize
	Dim path As String = fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		If currentProject.IsInitialized Then
			Dim currentProject As Project
			selectedRowID = -1
			ResetSelectStatusOfLineTable
			ClearWaveForm
		End If
		Dim isNew As Boolean = currentProject.Initialize(path)
		If isNew Then
			Dim langSelector As LanguagePairSelector
			langSelector.Initialize
			Dim langpairMap As Map = langSelector.ShowAndWait
			currentProject.SourceLang=langpairMap.Get("source")
			currentProject.TargetLang=langpairMap.Get("target")
		End If
		PlayFile(path)
		LoadLinesToTable
	End If
End Sub

Private Sub PlayFile(path As String)
	If vlc.IsPlaying Then
		vlc.Stop
	End If
	ProgressSlider.tag = False
	ProgressSlider.Value = 0
	vlc.Play(path)
	ProgressSlider.tag = True
	Do While vlc.IsPlaying == False
		Sleep(100)
	Loop
	TogglePlayingStatus(True)
	Dim time As Long = vlc.GetLength / 1000
	Dim minutes As Int =  Floor(time / 60)
	Dim seconds As Int = time - minutes*60
	TotalTimeLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Sub Progress_MouseExited_Event (MethodName As String, Args() As Object) As Object
	ProgressContextMenu.MenuItems.Clear
	Return Null
End Sub

Sub Progress_MouseClicked_Event (MethodName As String, Args() As Object) As ResumableSub
	If vlc.IsPlayable = False Then
		Return Null
	End If
	If vlc.IsSeekable = False Then
		fx.Msgbox(MainForm,"Not seekable","")
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	ProgressSlider.Enabled = False
	ProgressSlider.Value = percent * 100
	vlc.SetPosition(percent)
	ProgressContextMenu.MenuItems.Clear
	e.Consume
	Sleep(0)
	ProgressSlider.Enabled = True
	Return Null
End Sub

Sub Progress_MouseMoved_Event (MethodName As String, Args() As Object) As Object
	If vlc.IsPlayable = False Then
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	Dim time As Long = percent * vlc.GetLength / 1000
	ProgressContextMenu.MenuItems.Clear
	Dim mi As MenuItem
	mi.Initialize(GetTimeLabelText(time),"")
	ProgressContextMenu.MenuItems.Add(mi)
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ProgressSlider)
	Dim jo As JavaObject = ProgressContextMenu
	jo.RunMethod("show", Array(ProgressSlider, map1.Get("x")+e.X, map1.Get("y")-40))
	Return Null
End Sub

Private Sub VLCPane_Resize (Width As Double, Height As Double)
	ResizeVLCImageView(Width,Height)
End Sub

Private Sub ResizeVLCImageView(Width As Double, Height As Double)
	Dim img As Image = VLCImageView.GetImage
	If img.IsInitialized Then
		Dim radio As Double = img.Width/img.Height
		VLCImageView.Height = Height
		VLCImageView.Width = Width
		If img.Width/img.Height < Width/Height Then '16:9 4:3
			Dim desiredWidth As Double = VLCImageView.Height * radio
			VLCImageView.Left = (Width - desiredWidth) / 2
		Else
			Dim desiredHeight As Double = VLCImageView.Width / radio
			VLCImageView.Top = (Height - desiredHeight) / 2
		End If
	End If
End Sub

Private Sub ExitApp
	'vlc.stop
	vlc.release
	ExitApplication
End Sub

Private Sub VolSlider_ValueChange (Value As Double)
	Log(Value)
	vlc.SetVolume(Value)
End Sub

Private Sub StopButton_MouseClicked (EventData As MouseEvent)
	StopPlaying
End Sub

Private Sub StopPlaying
	vlc.Stop
	TogglePlayingStatus(False)
End Sub

Private Sub PlayButton_MouseClicked (EventData As MouseEvent)
	If vlc.IsPlaying Then
		vlc.Pause
		TogglePlayingStatus(False)
	Else
		vlc.Resume
		Do While vlc.IsPlaying = False
			Sleep(100)
		Loop
		TogglePlayingStatus(True)
	End If
End Sub


Private Sub TogglePlayingStatus(isPlaying As Boolean)
	If isPlaying Then
		vlc.SetVolume(VolSlider.Value)
		VLCPane.PrefWidth  = VLCPane.Width + 1
		VLCPane.PrefWidth  = VLCPane.Width - 1
		PlayButton.Text = ""
		ProgressTimer.Enabled = True
	Else
		PlayButton.Text = ""
		ProgressTimer.Enabled = False
	End If
End Sub

Private Sub ProgressTimer_Tick
	If vlc.IsPlaying Then
		If vlc.GetTime > expectedEndTime And expectedEndTime<>-1 Then
			expectedEndTime = -1
			vlc.Pause
			TogglePlayingStatus(False)
		End If
		ProgressSlider.Tag = False
		DrawPositionLineInWaveForm(vlc.GetTime)
		Dim time As Long = vlc.GetTime / 1000
		Dim minutes As Int = Floor(time / 60)
		Dim seconds As Int = time - minutes*60
		ProgressLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
		ProgressSlider.Value = vlc.GetTime/vlc.GetLength * 100
		Sleep(0)
		ProgressSlider.Tag = True
	Else
		TogglePlayingStatus(False)
	End If
End Sub

Private Sub DrawPositionLineInWaveForm(time As Long)
	If ReadyToDrawWaveForm Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		If startTimeMs >= cutStartTimeMs And startTimeMs <= cutStartTimeMs + cutDurationMs Then
			overviewRange.PlayTimeProgress = (time - cutStartTimeMs) / cutDurationMs
			Dim clipStartTime As Long  = overviewRange.StartProgress * cutDurationMs
			Dim clipEndTime As Long = overviewRange.EndProgress * cutDurationMs
			Dim clipTime As Long = clipEndTime - clipStartTime
			timestampRange.PlayTimeProgress = (time - cutStartTimeMs - clipStartTime) / clipTime
			If timestampRange.StopProgress <> -1 Then
				If timestampRange.PlayTimeProgress > timestampRange.StopProgress Then
					vlc.Pause
					TogglePlayingStatus(False)
				End If
			End If
		End If
	End If
End Sub

Private Sub WaveFormPane_MouseClicked (EventData As MouseEvent)
	Dim view As Node = Sender
	Dim jo As JavaObject = EventData
	If EventData.SecondaryButtonPressed And EnableWaveFormCheckBox.Checked Then
		RightClickTarget = jo.RunMethod("getTarget",Null)
		Dim isTimestampRange As Boolean = False
		If RightClickTarget Is ImageView Then
			Dim iv As ImageView = RightClickTarget
			isTimestampRange = (iv == timestampRange.ImageView)
		End If
		SetWaveFormContextMenuItems(isTimestampRange)
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = WaveFormContextMenu
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	End If
End Sub

Private Sub SetWaveFormContextMenuItems(isTimestampRange As Boolean)
	WaveFormContextMenu.MenuItems.Clear
	If isTimestampRange Then
		Dim playMi As MenuItem
		playMi.Initialize("Play the selection","playSelectionMI")
		WaveFormContextMenu.MenuItems.Add(playMi)
		Dim playSelectionHereMi As MenuItem
		playSelectionHereMi.Initialize("Play the selection from here","playSelectionHereMI")
		WaveFormContextMenu.MenuItems.Add(playSelectionHereMi)
	End If
	Dim playHereMi As MenuItem
	playHereMi.Initialize("Play from here","playHereMI")
	WaveFormContextMenu.MenuItems.Add(playHereMi)
	If isTimestampRange Then
		Dim splitHereMI As MenuItem
		splitHereMI.Initialize("Split here","splitHereMI")
		WaveFormContextMenu.MenuItems.Add(splitHereMI)
		Dim setStopPointMi As MenuItem
		setStopPointMi.Initialize("Set stop point","setStopPointMI")
		WaveFormContextMenu.MenuItems.Add(setStopPointMi)
		Dim clearStopPointMi As MenuItem
		clearStopPointMi.Initialize("Clear stop point","clearStopPointMI")
		WaveFormContextMenu.MenuItems.Add(clearStopPointMi)
	End If
End Sub

private Sub splitHereMI_Action
	If selectedRowID <> -1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		currentProject.AppendLineWithTime(selectedRowID - 1,AudioProgressLabel.Text,line.get("endTime"))
		line.Put("endTime",AudioProgressLabel.Text)
		LoadLinesToTable
	End If
End Sub

Private Sub setStopPointMI_Action
    timestampRange.StopProgress = timestampRange.LastMouseOverProgress
End Sub

Private Sub clearStopPointMI_Action
	timestampRange.StopProgress = -1
End Sub

Private Sub playHereMI_Action
	Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	vlc.SetTime(time)
	If vlc.IsPlaying = False Then
		vlc.Resume
		TogglePlayingStatus(True)
	End If
End Sub

Private Sub playSelectionMI_Action
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
	expectedEndTime = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True)
End Sub

Private Sub playSelectionHereMI_Action
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	expectedEndTime = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True)
End Sub


Sub MainForm_CloseRequest (EventData As Event)
	Log("We are closing the mainform")
	vlc.release
	ExitApplication
End Sub

Private Sub tableMenuItem_Action
	Dim mi As MenuItem = Sender
	Select mi.Text
	    Case "Play this line"
			PlayTheSelectedLine
		Case "Prepend a line"
			PrependLine
		Case "Append a line"
			AppendLine
		Case "Delete this line"
			currentProject.DeleteLine(selectedRowID - 1)
			LoadLinesToTable
		Case "Merge with the next line"
			MergeWithTheNextLine
		Case "Recognize this line"
			RecognizeTheSelectedLine
	End Select
End Sub

Private Sub HasValidateModel As Boolean
	Dim path As String = ASR.GetModelPath
	Log(path)
	If File.Exists(path,"") Then
		Return True
	End If
	Return False
End Sub

Private Sub RecognizeTheSelectedLine
	If HasValidateModel=False Then
		Dim response As Int = fx.Msgbox2(MainForm,"No models found","","Go to perferences","","Close",fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchTab(2)
		End If
		Return
	End If
	progressDialog.Show("Recognizing...")
	progressDialog.update2("Processing...")
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = currentLine.Get("startTime")
	Dim endTime As String = currentLine.Get("endTime")
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	If File.Exists(tmpDir,"audio.wav") = False Then
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
	End If
	
	wait for (FFMpeg.CutWav(tmpDir,"audio.wav","cut.wav",startTime,endTime)) Complete (done As Object)
	Wait For (ASR.RecognizeWav(File.Combine(tmpDir,"cut.wav"),currentProject.SourceLang)) Complete (done As Object)
	Dim content As String = File.ReadString(tmpDir,"cut.srt")
	content = Utils.RemoveBOM(content)
	Dim parser As SrtParser
	parser.Initialize
	Dim lines As List = parser.Parse(content)
	Dim sb As StringBuilder
	sb.Initialize
	For Each line As SpeechLine In lines
		sb.Append(line.text)
	Next
	SourceTextArea.Text = sb.ToString
	progressDialog.close
End Sub

Private Sub PrependLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Max(0,Utils.GetMillisecondsFromTimeString(currentLine.Get("startTime"))-1*1000)
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.PrependLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

private Sub NewLine
	If selectedRowID <> -1 Then
		AppendLine
	Else
		currentProject.AppendLine(-1)
		LoadLinesToTable
	End If
End Sub

Private Sub MergeWithTheNextLine
	If selectedRowID <> -1 Then
		currentProject.MergeWithTheNextLine(selectedRowID - 1)
		LoadLinesToTable
	End If
End Sub

Private Sub AppendLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(currentLine.Get("endTime"))
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.AppendLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

Private Sub PlayTheSelectedLine
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
	expectedEndTime = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True)
End Sub

Private Sub LoadLineToEditor(fromLongClick As Boolean)
	isLongClick = fromLongClick
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	SourceTextArea.Text = line.Get("source")
	TargetTextArea.Text = line.Get("target")
	StartTimeTextField.Text = line.Get("startTime")
	EndTimeTextField.Text = line.Get("endTime")
	If fromLongClick = False Then
		clearTMandMT
		ShowMT(SourceTextArea.Text,True)
	End If
	Sleep(200)
	isLongClick = False
End Sub

Private Sub clearTMandMT
	TMTableView.Items.Clear
	TMTextArea.Text=""
End Sub

Private Sub ShowMT(sourceText As String,fromTextArea As Boolean)
	Dim preferencesMap As Map = Utils.getPrefMap
	If preferencesMap.ContainsKey("mt") Then
		Dim mtPreferences As Map=preferencesMap.Get("mt")
		For Each engine As String In MT.getMTList
			If mtPreferences.GetDefault(engine&"_enabled",False)=True Then
				appendSingleMTResult(sourceText,fromTextArea,engine)
			End If
		Next
	End If
End Sub

Private Sub appendSingleMTResult(sourceText As String,fromTextArea As Boolean,engine As String)
	wait for (MT.getMT(sourceText,currentProject.SourceLang,currentProject.TargetLang,engine)) Complete (target As String)
	If fromTextArea And sourceText <> SourceTextArea.Text Then
		Return
	End If
	Dim lbl As Label
	lbl.Initialize("lbl")
	lbl.Text=target
	lbl.TooltipText=target
	Dim row() As Object
	row=Array("","",lbl,engine)
	Log(target)
	TMTableView.Items.Add(row)
End Sub


Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If TMTableView.SelectedRow=-1 Then
		Return
	End If
	If TMTableView.SelectedRowValues=Null Then
		Return
	End If
	Dim lbl As Label=TMTableView.SelectedRowValues(2)
	If EventData.ClickCount=2 Then
		TargetTextArea.Text=lbl.Text
	Else if EventData.ClickCount=1 Then
		TMTextArea.Text=lbl.Text
	End If
End Sub

Private Sub UpdateTime(isStartTime As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	
	If isLongClick Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isStartTime Then
		line.Put("startTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${StartColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("endTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${EndColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
End Sub

Private Sub UpdateText(isSource As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	If isLongClick Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isSource Then
		line.Put("source",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${SourceColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("target",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${TargetColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
End Sub

Private Sub SourceTextArea_TextChanged (Old As String, New As String)
	UpdateText(True,New)
End Sub

Private Sub TargetTextArea_TextChanged (Old As String, New As String)
	UpdateText(False,New)
End Sub

Private Sub StartTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(True,New)
End Sub

Private Sub EndTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(False,New)
End Sub

Private Sub UseCurrentTimeButton_MouseClicked (EventData As MouseEvent)
	If focusedTimeTextField.IsInitialized Then
		focusedTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(vlc.GetTime)
	End If
End Sub

Private Sub StartTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = StartTimeTextField
	End If
End Sub

Private Sub EndTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = EndTimeTextField
	End If
End Sub

Private Sub EnableWaveFormCheckBox_CheckedChange(Checked As Boolean)
	If Checked Then
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ConvertToWav(parent,filename,tmpDir)) Complete (done As Object)
		If ReadyToDrawWaveForm Then
			DrawWaveForm
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub VLCImageView_MouseClicked (EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then
		Dim view As B4XView = Sender
		Dim cm As ContextMenu
		cm.Initialize("")
		Dim playControlMi As MenuItem
		playControlMi.Initialize("Play control","playControlMi")
		cm.MenuItems.Add(playControlMi)
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = cm
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	End If
End Sub

Private Sub playControlMi_Action
	If PlayControl.IsInitialized = False Then
		PlayControl.Initialize(vlc)
	End If
	PlayControl.Show
End Sub

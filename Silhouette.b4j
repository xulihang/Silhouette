AppType=JavaFX
Build1=Default,org.xulihang.silhouette
File1=Aligner.bjl
File10=EmailReset.bjl
File11=ErrorReporter.bjl
File12=ExportOptions.bjl
File13=FFmpeg.bjl
File14=FramesExtractor.bjl
File15=generalPreference.bjl
File16=generalSettings.bjl
File17=icon.png
File18=inputbox.bjl
File19=JumpOptions.bjl
File2=apiparamfiller.bjl
File20=LangaugePairSelector.bjl
File21=langcodes.txt
File22=languagesWithoutSpace.txt
File23=LeftSplitPane.bjl
File24=LineEditor.bjl
File25=ListView.bjl
File26=main.bjl
File27=main_mac.bjl
File28=modelPreference.bjl
File29=MTSetting.bjl
File3=APISetting.bjl
File30=PlayControl.bjl
File31=pretranslate.bjl
File32=progress.bjl
File33=projectSetting.bjl
File34=RangeSelector.bjl
File35=searchandreplace.bjl
File36=segment.bjl
File37=segmentationRules.srx
File38=sentenceSplitter.bjl
File39=silhouette.png
File4=ASROptions.bjl
File40=SplittingOptions.bjl
File41=subtitlePreference.bjl
File42=SubtitleRemovedVideoCreator.bjl
File43=TopRightSplitPane.bjl
File44=TopSplitPane.bjl
File45=TranslationAssist.bjl
File46=TranslationMemory.bjl
File47=validator.bjl
File48=VideoPlayer.bjl
File49=VoiceInput.bjl
File5=BatchTranslator.bjl
File50=WaveForm.bjl
File6=BottomSplitPane.bjl
File7=ChineseConverter.bjl
File8=Editor.bjl
File9=editorLV.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=Default Group
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=Default Group
FileGroup44=Default Group
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=abplugin
Library10=jfx
Library11=jokhttputils2
Library12=jpoi
Library13=jrandomaccessfile
Library14=jreflection
Library15=jshell
Library16=json
Library17=jxmlsaxenhanced
Library18=jxui
Library19=okhttp
Library2=b4xcollections
Library20=threading
Library21=xcustomlistview
Library22=xlutils
Library23=xmlbuilder
Library24=xui views
Library25=apachestringutilsb4j
Library3=b4xtable
Library4=byteconverter
Library5=encryption
Library6=jaudiorecord2-b4xlib
Library7=javaobject
Library8=jb4xencryption
Library9=jcore
Module1=Aligner
Module10=|relative|..\Validator\EmailReset
Module11=ErrorReporter
Module12=Exporter
Module13=ExportOptions
Module14=FFMpeg
Module15=FFMpegForm
Module16=ForcedAlignment
Module17=FramesExtractor
Module18=InputBox
Module19=JumpOptions
Module2=AlignerProject
Module20=jVLC
Module21=LanguagePairSelector
Module22=LFAlign
Module23=LocalizationHelper
Module24=Localizator
Module25=Map2Xml
Module26=MT
Module27=NativeHook
Module28=OpenCC
Module29=PlayControlForm
Module3=APIParamsFiller
Module30=Preferences
Module31=preTranslateDialog
Module32=progressDialog
Module33=Project
Module34=ProjectSettings
Module35=RangeSelector
Module36=SearchAndReplaceDialog
Module37=segmentation
Module38=SentenceSplitter
Module39=SileroVad
Module4=ASR
Module40=SimpleTag
Module41=SplittingOptionsForm
Module42=SRTImportOptions
Module43=SrtParser
Module44=SRX
Module45=SubtitleRemovedVideoCreator
Module46=TagKind
Module47=TextFlow
Module48=UndoManager
Module49=Utils
Module5=ASROptions
Module50=|relative|..\Validator\Validator
Module51=VoiceInput
Module52=WaveFormBitmapCreator
Module53=WavRandomAccessFile
Module54=XLIFF
Module55=Xml2Map
Module56=XMLBuilder2
Module57=XmlNode
Module58=XmlParser
Module59=XMLUtils
Module6=BatchTranslator
Module7=ChineseConverterForm
Module8=DraggableRange
Module9=editDistance
NumberOfFiles=50
NumberOfLibraries=25
NumberOfModules=59
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600
	#VirtualMachineArgs: --add-opens javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
#End Region

#AdditionalJar: jna-5.16.0
#AdditionalJar: slf4j-api-1.7.10
#AdditionalJar: jna-platform-5.16.0
#AdditionalJar: vlcj-4.8.3
#AdditionalJar: vlcj-javafx-1.2.0
#AdditionalJar: vlcj-natives-4.8.3
#AdditionalJar: sqlite-jdbc-3.43.0.0
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: silero-vad
#AdditionalJar: onnxruntime-1.20.0
#AdditionalJar: jnativehook-2.2.2
'for opencc
#AdditionalJar: nlp-common-0.0.5
#AdditionalJar: heaven-0.2.0
#AdditionalJar: opencc4j-1.8.1

Sub Process_Globals
	Public prefPath As String
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private vlc As jVLC
	Private MenuBar1 As MenuBar
	Private MainPane As Pane
	Private EditorSplitPane As SplitPane
	Private VLCPane As Pane
	Private PlayButton As Button
	Private ProgressSlider As Slider
	Private VolSlider As Slider
	Private ProgressLabel As Label
	Private TotalTimeLabel As Label
	Private ProgressTimer As Timer
	Private ProgressContextMenu As ContextMenu
	Private WaveFormContextMenu As ContextMenu
	Private RightClickTarget As Node
	Private BottomSplitPane As SplitPane
	Private TopSplitPane As SplitPane
	Private TopRightSplitPane As SplitPane
	Private SourceTextArea As TextArea
	Private TargetTextArea As TextArea
	Private LinesTable As B4XTable
	Public currentProject As Project
	Private tableCM As ContextMenu
	Private playerContextMenu As ContextMenu
	Private robot As JavaObject
	Private selectedRowID As Int = -1
	Private expectedEndTime As Int = -1
	Private segmentLength As Int = 30
	Private EndTimeTextField As TextField
	Private StartTimeTextField As TextField
	Private StartColumn As B4XTableColumn
	Private EndColumn As B4XTableColumn
	Private SourceColumn As B4XTableColumn
	Private TargetColumn As B4XTableColumn
	Private focusedTimeTextField As TextField
	Private AssistTabPane As TabPane
	Private TMTableView As TableView
	Private TMTextArea As TextArea
	Public plugin As ABPlugin
	Private isLongClick As Boolean = False
	Private VLCImageView As ImageView
	Private OverviewWaveFormImageView As ImageView
	Private WaveFormImageView As ImageView
	Private waveFormCreator As WaveFormBitmapCreator
	Private overviewRange As DraggableRange
	Private cutDurationMs As Long
	Private cutStartTimeMs As Long
	Private timestampRange As DraggableRange
	Private AudioProgressLabel As Label
	Private EnableWaveFormCheckBox As CheckBox
	Private PlayControl As PlayControlForm
	Private playbackStartDate As Long = -1
	Private playbackStartTime As Long = -1
	Private SetEndPointButton As Button
	Private FollowProgressCheckBox As CheckBox
	Private KeepRatioCheckBox As CheckBox
	Private hook As NativeHook
	Public loc As Localizator
	Type SortCriteria (o As Object,value As Long)
	Private SubtitleLabel As Label
	Private DisplaySubtitleCheckBox As CheckBox
	Public version As String = "1.5.2"
	Public limitedMode As Boolean = False
	Private loopMode As Boolean = False
	Private player As MediaPlayer
	Private SplitModeToggleButton As ToggleButton
	Private SplitAtPlaybackPositionToggleButton As ToggleButton
	Type LineRange (startIndex As Int,endIndex As Int)
	Private alignedRange As LineRange
	Private continuousMode as Boolean = False
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	prefPath = File.Combine(File.DirData("Silhouette"),"preferences.conf")
	initLoc
	If Utils.DetectOS = "windows" Then
		Try
			hook.Initialize(Me,"Hook")
		Catch
			Log(LastException)
		End Try
	End If
	MainForm = Form1
	If Utils.DetectOS = "mac" Then
		MainForm.RootPane.LoadLayout("main_mac")
	Else
		MainForm.RootPane.LoadLayout("main")
	End If
	MainForm.WindowWidth = 800
	MainForm.Show
	MainPane.LoadLayout("Editor")
	EditorSplitPane.LoadLayout("TopSplitPane")
	EditorSplitPane.LoadLayout("BottomSplitPane")
	EditorSplitPane.Vertical = True
	TopSplitPane.LoadLayout("VideoPlayer")
	TopSplitPane.LoadLayout("TopRightSplitPane")
	TopSplitPane.DividerPositions = Array As Double(0.8,0.2)
	TopRightSplitPane.LoadLayout("WaveForm")
	TopRightSplitPane.LoadLayout("LineEditor")
	TopRightSplitPane.Vertical = True
	BottomSplitPane.LoadLayout("ListView")
	BottomSplitPane.LoadLayout("TranslationAssist")
	AssistTabPane.LoadLayout("TranslationMemory",loc.Localize("Translation"))
	TMTableView.SetColumnWidth(0,50)
	TMTableView.SetColumnWidth(1,50)
	TMTableView.SetColumnWidth(2,200)
	TMTableView.SetColumnWidth(3,100)
	vlc.Initialize(VLCImageView)
	VLCImageView.PreserveRatio = True
	
	ProgressTimer.Initialize("ProgressTimer",100)
	ProgressTimer.Enabled = False
	tableCM.Initialize("tableCM")
	For Each text As String In Array(loc.Localize("Play this line"), _ 
                                     loc.Localize("Play from this line"), _ 
		                             loc.Localize("Delete this line"), _ 
									 loc.Localize("Prepend a line"), _ 
									 loc.Localize("Append a line"), _ 
									 loc.Localize("Merge with the next line"), _ 
									 loc.Localize("Recognize this line"))
		Dim mi As MenuItem
		mi.Initialize(text,"tableMenuItem")
		tableCM.MenuItems.Add(mi)
	Next
	Try
		robot = robot.InitializeStatic("com.sun.glass.ui.Application").RunMethodJO("GetApplication",Null).RunMethodJO("createRobot",Null)
	Catch
		Log(LastException)
	End Try
	Dim jo As JavaObject = ProgressSlider
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mousemoved", Null)
	jo.RunMethod("setOnMouseMoved", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseclicked", Null)
	jo.RunMethod("setOnMouseClicked", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseexited", Null)
	jo.RunMethod("setOnMouseExited", Array(e))
	ProgressSlider.tag = False
	ProgressContextMenu.Initialize("ProgressContextMenu")
	WaveFormContextMenu.Initialize("WaveFormContextMenu")
	addKeyEvent(SourceTextArea,"sourceTextArea")
	SetTable
	loadPlugins
	AddWaveFormControls
	SubtitleLabel.Visible = False
	
	LocalizeMainFrom
	Sleep(0)
	Dim v As Validator
	v.Initialize
	If v.VerifyInSilence = False Then
		'v.showAndWait
	End If
	If Args.Length = 1 Then
		Dim filePath As String = Args(0)
		If filePath.Contains("sip") Then
			OpenFile(Utils.GetFilenameWithoutExtension(filePath),False)
		Else
			If File.Exists(filePath&".sip","") Then
				OpenFile(filePath,False)
			Else
				OpenFile(filePath,True)
			End If
		End If
	End If
	AskAboutGPU
End Sub

Public Sub AskAboutGPU
	If Utils.DetectOS = "windows" And File.Exists(File.DirData("Silhouette"),"gpuAsked") = False Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("Enable GPU for speech recognition? If your GPU power is weak, you'd better use CPU."),"",loc.Localize("Yes"),"",loc.Localize("No"),fx.MSGBOX_CONFIRMATION)
		Dim preferencesMap As Map = Utils.getPrefMap
		If response = fx.DialogResponse.POSITIVE Then
			preferencesMap.Put("use_gpu",True)
		Else
			preferencesMap.Put("use_gpu",False)
		End If
		Dim json As JSONGenerator
		json.Initialize(preferencesMap)
		File.WriteString(prefPath,"",json.ToPrettyString(4))
		File.WriteString(File.DirData("Silhouette"),"gpuAsked","")
	End If
End Sub

Public Sub initLoc
	If File.Exists(File.DirApp,"strings.db") Then
		loc.Initialize(File.DirApp,"strings.db")
		Dim preferencesMap As Map = Utils.getPrefMap
		If preferencesMap.ContainsKey("lang") Then
			loc.ForceLocale(preferencesMap.Get("lang"))
		End If
	End If
End Sub

Public Sub LocalizeMainFrom
	loc.LocalizeForm(MainForm)
End Sub

Private Sub AddWaveFormControls
	Dim overviewPane As Pane = overviewRange.Initialize(Me,"overviewRange")
	Dim timestampRangePane As Pane = timestampRange.Initialize(Me,"timestampRange")
	Dim parent As Pane = OverviewWaveFormImageView.Parent
	parent.AddNode(overviewPane,OverviewWaveFormImageView.Left,OverviewWaveFormImageView.Top,OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height)
	parent.AddNode(timestampRangePane,WaveFormImageView.Left,WaveFormImageView.top,WaveFormImageView.width,WaveFormImageView.Height)
End Sub


'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	If StackTrace.Contains("Unable to load library") And StackTrace.Contains("vlc") Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("Please install VLC v3 first and then restart the program."),"",loc.Localize("Download"),loc.Localize("Okay"),"",fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			fx.ShowExternalDocument("https://www.videolan.org/vlc/")
		End If
	Else
		Dim reporter As ErrorReporter
		reporter.Initialize
		reporter.ShowAndWait("error: "&Error.Message&CRLF&"StackTrace: "&StackTrace)
	End If
	Return False
End Sub


Public Sub loadPlugins
	Dim dir As String
	dir=File.Combine(File.DirApp,"plugins")
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

private Sub SetTable
	LinesTable.HeaderFont = xui.CreateFont(fx.DefaultFont(15),15)
	LinesTable.HeadersHeight = 30dip
	LinesTable.RowHeight = 30dip
	Dim NumberColumn As B4XTableColumn = LinesTable.AddColumn(loc.Localize("No."), LinesTable.COLUMN_TYPE_TEXT)
	NumberColumn.Width = 80dip
	NumberColumn.Sortable = False
	StartColumn = LinesTable.AddColumn(loc.Localize("Start"), LinesTable.COLUMN_TYPE_TEXT)
	StartColumn.Width = 105dip
	StartColumn.Sortable = False
	EndColumn = LinesTable.AddColumn(loc.Localize("End"), LinesTable.COLUMN_TYPE_TEXT)
	EndColumn.Width = 105dip
	EndColumn.Sortable = False
	SourceColumn = LinesTable.AddColumn(loc.Localize("Source"), LinesTable.COLUMN_TYPE_TEXT)
	SourceColumn.Sortable = False
	TargetColumn = LinesTable.AddColumn(loc.Localize("Target"), LinesTable.COLUMN_TYPE_TEXT)
	TargetColumn.Sortable = False
	LinesTable.SearchVisible = False
	LinesTable.SelectionColor = xui.Color_Transparent
	AddKeyEventListener(LinesTable.mBase)
	LinesTable.StringTo = loc.Localize("to")
	LinesTable.StringOutOf = loc.Localize("out of")
End Sub

Private Sub MenuBar1_Action
	Dim mi As MenuItem = Sender
	Select loc.FindSource(mi.Text)
		Case "_Open Media File"
			SelectFile
		Case "_Save"
			Save
		Case "translate _multiple files"
			ShowBatchTranslator
		Case "_Close"
			Close
		Case "_Preferences"
			ShowPreferences
		Case "_Recognize Speech"
			RecognizeSpeech
		Case "_Detect Voice Activity"
			DetectVoiceActivity
		Case "_Pretranslate"
			Dim dialog As preTranslateDialog
			dialog.Initialize
			Dim options As Map = dialog.ShowAndWait
			pretranslate(options)
		Case "_New Line"
			NewLine
		Case "_Clear Lines"
			ClearLines
		Case "Clear Empty Lines"
			ClearEmptyLines
		Case "Sor_t Lines"
			SortLines
		Case "Break Lines"
			BreakLines
		Case "Merge Lines"
			MergeLines
		Case "Sh_ift Time"
			ShiftTime
		Case "Split"
			SplitCurrentLine
		Case "Move Up"
			MoveUpCurrentLine
		Case "Move Down"
			MoveDownCurrentLine
		Case "_Search and Replace"
			Dim snr As SearchAndReplaceDialog
			snr.Initialize(currentProject.lines)
			snr.show
		Case "_Undo"
			currentProject.Undo
			LoadLinesToTable
		Case "R_edo"
			currentProject.redo
			LoadLinesToTable
		Case "_Jump to Line"
			JumpToLine
		Case "Jump to the Line of the Current _Time"
			JumpToLineOfCurrentTime
		Case "Jump to the _Next Line"
			If selectedRowID <> -1 Then
				JumpToRow(selectedRowID + 1,0)
			End If
		Case "Jump to the _Previous Line"
			If selectedRowID <> -1 Then
				JumpToRow(selectedRowID - 1,0)
			End If
		Case "Jump to the Previous Line and Play"
			playPreviousLineMI_Action
		Case "Jump to the Next Line and Play"
			playNextLineMI_Action
		Case "Jump _Forward"
			Forward
		Case "Jump _Backward"
			Backward
		Case "Pause/Resume"
			TogglePlaying
		Case "Play the _Previous Line"
			If selectedRowID <> -1 Then
				PlayLineByID(selectedRowID - 1)
			End If
		Case "Play the _Next Line"
			If selectedRowID <> -1 Then
				PlayLineByID(selectedRowID + 1)
			End If
		Case "Play Every Line"
			PlayEveryLine
		Case "_Settings"
			Dim ps As ProjectSettings
			ps.Initialize(currentProject)
			ps.show
		Case "Switch Source and Target"
			SwitchSourceAndTarget
		Case "import from _srt"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				Dim optionsForm As SRTImportOptions 
				optionsForm.Initialize
				Dim option As Int = optionsForm.ShowAndWait
				ImportFromSRT(path,option)
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "import from txt"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("Import to source or target?"),"",loc.Localize("source"),"",loc.Localize("target"),fx.MSGBOX_CONFIRMATION)
				If response = fx.DialogResponse.POSITIVE Then
					ImportFromPlainTXT(path,True)
				Else
					ImportFromPlainTXT(path,False)
				End If
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "import from tab-delimited _txt"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				ImportFromTXT(path)
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "import from XLIFF"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				ImportFromXLIFF(path)
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to _srt"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("SRT",Array As String("*.srt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Exporter.ExportToSRT(currentProject.lines,path,True,0)
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to txt"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("TXT",Array As String("*.txt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("Export source or target?"),"",loc.Localize("source"),"",loc.Localize("target"),fx.MSGBOX_CONFIRMATION)
				If response = fx.DialogResponse.POSITIVE Then
					Exporter.ExportToPlainTXT(currentProject.lines,True,path)
				Else
					Exporter.ExportToPlainTXT(currentProject.lines,False,path)
				End If
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to tab-delimited _txt"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("TXT",Array As String("*.txt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Exporter.ExportToTXT(currentProject.lines,path)
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to XLIFF"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("XLIFF",Array As String("*.xlf"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Exporter.ExportToXLIFF(currentProject.lines,path,currentProject.SourceLang,currentProject.TargetLang)
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to video with burned-in subtitle"
			ShowFFmpegFormToBurnSubtitle
		Case "_Exit"
			ExitApp
		Case "_Voice Input"
			Dim vi As VoiceInput
			vi.Initialize(currentProject)
			vi.Show
		Case "_Aligner"
			ShowAligner
		Case "Chinese Converter"
			ShowChineseConverter
		Case "Frames Extractor"
			Dim fe As FramesExtractor
			fe.Initialize
			If currentProject.IsInitialized And currentProject <> Null Then
				fe.Show(currentProject.GetMediaPath)
			Else
				fe.Show("")
			End If
		Case "Subtitle-Removed Video Creator"
			If currentProject.IsInitialized Then
				Dim creator As SubtitleRemovedVideoCreator
				creator.Initialize(currentProject.GetMediaPath)
				creator.Show
			Else
				fx.Msgbox(MainForm,loc.Localize("Please open a file first."),"")
			End If
			
		Case "FFmpeg"
			Dim ffForm As FFMpegForm
			ffForm.Initialize
			ffForm.Show
		Case "Export UI strings"
			LocalizationHelper.Export
		Case "_About"
			fx.Msgbox(MainForm,"@xulihang, 2025","Silhouette "&version)
	End Select
End Sub

Private Sub ShowFFmpegFormToBurnSubtitle
	Dim fc As FileChooser
	fc.Initialize
	fc.SetExtensionFilter("SRT",Array As String("*.srt"))
	fc.Title = loc.Localize("Select the SRT file (You need to export to an SRT file first).")
	Dim path As String = fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		Dim fc As FileChooser
		fc.Initialize
		fc.Title = loc.Localize("Select the output path.")
		Dim filename As String = currentProject.GetMediaFilename
		fc.InitialFileName = "out-"&filename
		Dim outputPath As String = fc.ShowSave(MainForm)
		If outputPath <> "" Then
			Dim ffForm As FFMpegForm
			ffForm.Initialize
			ffForm.Show
			Dim args As List
			args = Array As String("-i",$""${currentProject.GetMediaPath}""$,"-vf",$""subtitles=${File.GetName(path)}:force_style='MarginV=20'""$,$""${outputPath}""$,"-y")
			Dim sb As StringBuilder
			sb.Initialize
			For Each arg As String In args
				sb.Append(arg).Append(" ")
			Next
			ffForm.SetWorkdir(File.GetFileParent(path))
			ffForm.SetArguments(sb.ToString.Trim)
		End If
		
	End If
End Sub

private Sub SwitchSourceAndTarget
	For Each line As Map In currentProject.lines
		Dim source As String = line.Get("source")
		Dim target As String = line.Get("target")
		line.Put("source",target)
		line.Put("target",source)
	Next
	LoadLinesToTable
End Sub

Private Sub ShowChineseConverter
	Dim cc As ChineseConverterForm
	cc.Initialize(currentProject.lines)
	cc.Show
End Sub

Public Sub GetSelectedLines As List
	Dim selected As List
	selected.Initialize
	If selectedRowID <> -1 Then
		selected.Add(currentProject.lines.Get(selectedRowID - 1))
	End If
	Return selected
End Sub

Private Sub ShowAligner
	Dim inp As InputBox
	inp.Initialize
	inp.Title = loc.Localize("Please input the text to align.")
	Dim target As String = inp.showAndWait("")
	Dim selector As RangeSelector
	selector.Initialize
	selector.SetRange(1,currentProject.lines.Size)
	alignedRange = selector.ShowAndWait
	Log(alignedRange)
	Dim targetList As List
	targetList.Initialize
	For Each line As String In Regex.Split(CRLF,target)
		targetList.Add(line)
	Next
	Dim sourceList As List
	sourceList.Initialize
	For i = alignedRange.startIndex To alignedRange.endIndex 
		Dim lineMap As Map = currentProject.lines.Get(i)
		sourceList.Add(lineMap.Get("source"))
	Next
	Dim a As Aligner
	a.Initialize(Me,"Aligner")
	a.Show(sourceList,targetList,currentProject.SourceLang,currentProject.SourceLang)
End Sub

private Sub Aligner_Completed(aligned As List)
	If aligned.Size > 0 And alignedRange<>Null Then
		Dim lines As List
		lines.Initialize
		For i = alignedRange.startIndex To alignedRange.endIndex
			Dim lineMap As Map = currentProject.lines.Get(i)
			lines.Add(lineMap)
		Next
		Dim fa As ForcedAlignment
		fa.Initialize
		Dim newLines As List = fa.AlignByText(lines,aligned)
		Log(newLines)
		currentProject.ReplaceLinesInRangeByIndex(newLines,alignedRange)
		LoadLinesToTable
		alignedRange = Null
	End If
End Sub

Private Sub ShowPreferences As Preferences
	Dim pref As Preferences
	pref.Initialize(MenuBar1)
	pref.Show
	Return pref
End Sub

Private Sub JumpToLineOfCurrentTime
	JumpToRow(FindTheRowIDOfTime(GetCurrentVideoTime),200)
End Sub

Private Sub FindTheRowIDOfTime(timeMs As Long) As Int
	Dim rowID As Int = 1
	rowID = 1
	Dim NotInRange As Boolean = True
	For Each line As Map In currentProject.lines
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		Dim endTime As String = line.Get("endTime")
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(endTime)
		If startTimeMs < timeMs And endTimeMs > timeMs Then
			NotInRange = False
			Exit
		End If
		rowID = rowID + 1
	Next
	If NotInRange = True Then
		rowID = -1
	Else
		rowID = Min(currentProject.lines.Size,rowID)
	End If
	Return rowID
End Sub

Private Sub JumpToLine
	Dim optionsForm As JumpOptions
	optionsForm.Initialize
	Dim options As Map = optionsForm.ShowAndWait
	Dim index As Int = 1
	If options.ContainsKey("index") Then
		index= options.Get("index")
	else if options.ContainsKey("time") Then
		Dim time As String = options.Get("time")
		Dim timeMs As Long = Utils.GetMillisecondsFromTimeString(time)
		index = 1
		For Each line As Map In currentProject.lines
			Dim startTime As String = line.Get("startTime")
			Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
			If timeMs < startTimeMs Then
				Exit
			End If
			index = index + 1
		Next
		index = Min(currentProject.lines.Size,index)
	End If
	JumpToRow(index,200)
End Sub

Public Sub JumpToRow(rowID As Int,sleepTime As Int)
	If rowID = -1 Then
		Return
	End If
	ResetSelectStatusOfLineTable
	Dim pageIndex As Int = Ceil(rowID / LinesTable.RowsPerPage)
	LinesTable.CurrentPage = pageIndex
	If sleepTime > 0 Then
		Sleep(sleepTime)
	End If
	SelectRow(rowID,True)
End Sub

Private Sub ConvertToWav(parent As String,filename As String, tmpDir As String) As ResumableSub
	If File.Exists(tmpDir,"audio.wav") = False Then
		progressDialog.Show(loc.Localize("Converting to audio..."))
		progressDialog.update2(loc.Localize("Processing..."))
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
		progressDialog.close
	End If
	If File.Exists(tmpDir,"segment-00000.wav") = False Then
		progressDialog.Show(loc.Localize("Splitting audio..."))
		Log("split wav...")
		Wait For (FFMpeg.SplitWav(segmentLength,tmpDir,"audio.wav")) Complete (done As Object)
		Log("split wav done")
		progressDialog.close
	End If
	Return ""
End Sub

Private Sub RecognizeSpeech
	If currentProject.IsInitialized=False Then
		Return
	End If
	If limitedMode And vlc.GetLength > 5 * 60 * 1000 Then
		fx.Msgbox(MainForm,loc.Localize("Limited mode can only recognize a media file shorter than 5 minutes."),"")
		Return
	End If
	Dim optionsForm As ASROptions
	optionsForm.Initialize
	Dim options As Map = optionsForm.ShowAndWait
	Dim method As Int = options.GetDefault("split_method",-1)
	If method = -1 Then
		Return
	End If
	If method = 0 Then
		RecognizeSpeechByFixedSpan
	Else if method = 1 Then
		RecognizeExistingLines
	Else
		RecognizeWholeSpeech
	End If
End Sub

Private Sub RecognizeExistingLines As ResumableSub
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchToTheLastTab
		End If
		Return ""
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	progressDialog.Show(loc.Localize("Recognizing audio..."))
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		progressDialog.update(index,currentProject.lines.Size)
		index = index + 1
		If progressDialog.isShowing = False Then
			Exit
		End If
		If line.Get("source") <> "" And Utils.getPref("skip_recognized",True) Then
			Continue
		End If
		Dim startTime As String = line.Get("startTime")
		Dim endTime As String = line.Get("endTime")
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ASR.RecognizeCut(tmpDir,"audio.wav",startTime,endTime,currentProject.SourceLang,engine)) complete (str As String)
		line.Put("source",str)
	Next
	LoadLinesToTable
	progressDialog.close
	Return ""
End Sub

Private Sub RecognizeWholeSpeech As ResumableSub
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchToTheLastTab
		End If
		Return ""
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	
	Dim files As List = File.ListFiles(tmpDir)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	progressDialog.Show(loc.Localize("Recognizing audio..."))
	
	Dim needRecognition As Boolean = False
	If (File.Exists(tmpDir,"audio.srt") = False And File.Exists(tmpDir,"audio.wav.srt") = False) Or Utils.getPref("skip_recognized",True) = False Then
		needRecognition = True
	End If
	If needRecognition Then
		Dim wavPath As String = File.Combine(tmpDir,"audio.wav")
		Wait For (ASR.RecognizeWavWithProgressInfo(Me,"ASR",wavPath,currentProject.SourceLang,engine,wavFiles.Size)) Complete (success As Boolean)
	End If
	progressDialog.close
	If success Then
		Dim filename As String
		If File.Exists(tmpDir,"audio.srt") Then
			filename = "audio.srt"
		else if File.Exists(tmpDir,"audio.wav.srt") Then
			filename = "audio.wav.srt"
		End If
	
		Dim parser As SrtParser
		parser.Initialize
		Dim content As String = File.ReadString(tmpDir,filename)
		content = Utils.RemoveBOM(content)
		Dim lines As List = parser.Parse(content)
		For Each line As SpeechLine In lines
			Dim startTime As String = line.startTime
			Dim endTime As String = line.endTime
			currentProject.AddLine(startTime,endTime,line.text,"")
		Next
		LoadLinesToTable
	End If
	Return ""
End Sub

Private Sub ASR_ProgressChanged(completed As Double,size As Int)
	progressDialog.update(completed,size)
End Sub

Private Sub RecognizeSpeechByFixedSpan As ResumableSub
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchToTheLastTab
		End If
		Return ""
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	
	Dim files As List = File.ListFiles(tmpDir)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	wavFiles = SortedWavFiles(wavFiles)
	progressDialog.Show(loc.Localize("Recognizing audio..."))
	Dim index As Int = 1
	For Each filename As String In wavFiles
		Log(index & "/" & wavFiles.Size)
		Dim purename As String = Utils.GetFilenameWithoutExtension(filename)
		'stored as "segment-00000.srt" or "segment-00000.wav.srt"
		If (File.Exists(tmpDir,purename&".srt") = False And File.Exists(tmpDir,filename&".srt") = False) Or Utils.getPref("skip_recognized",True) = False Then
			progressDialog.update(index-1,wavFiles.Size)
			Dim wavpath As String = File.Combine(tmpDir,filename)
			Wait For (ASR.RecognizeWav(wavpath,currentProject.SourceLang,engine)) Complete (done As Object)
		End If
		If progressDialog.isShowing = False Then
			Exit
		End If
		index = index + 1
	Next
	progressDialog.close
	LoadSRTToProject
	LoadLinesToTable
	Return ""
End Sub

Private Sub LoadSRTToProject
	Dim simpleChinese As Boolean = False
	Dim traditionalChinese As Boolean = False
	Dim cc As OpenCC
	If Utils.getPref("convert_chinese_base_on_source_lang",True) Then
		If currentProject.SourceLang == "zh" Or currentProject.SourceLang == "zh-CN" Then
			simpleChinese = True
			cc.Initialize
		End If
		If currentProject.SourceLang == "zh-TW" Then
			traditionalChinese = True
			cc.Initialize
		End If
	End If
	Dim parser As SrtParser
	parser.Initialize
	Dim dir As String = currentProject.GetTmpFolder
	Dim files As List = File.ListFiles(dir)
	currentProject.Clear
	Dim index As Int = 0
	Dim srtFiles As List
	srtFiles.Initialize
	For Each filename As String In files
		If filename.EndsWith(".srt") And filename.StartsWith("segment") Then
			srtFiles.Add(filename)
		End If
	Next
	If srtFiles.Size>0 Then
		srtFiles = SortedSRTFiles(srtFiles)
	End If
	Dim convertedLines As List
	convertedLines.Initialize
	For Each filename As String In srtFiles
		Dim offsetMS As Int = index * segmentLength * 1000
		Dim content As String = File.ReadString(dir,filename)
		content = Utils.RemoveBOM(content)
		Dim lines As List = parser.Parse(content)
		For Each line As SpeechLine In lines
			Dim startTime As String = Utils.ShiftTimeString(line.startTime,offsetMS)
			Dim endTime As String = Utils.ShiftTimeString(line.endTime,offsetMS)
			Dim convertedLine As Map
			Dim source As String = line.text
			If cc.IsInitialized Then
				If simpleChinese Then
					source = cc.ConvertToSimple(source)
				else if traditionalChinese Then
					source = cc.ConvertToTraditional(source)
				End If
			End If
			convertedLine.Initialize
			convertedLine.Put("source",source)
			convertedLine.Put("target","")
			convertedLine.Put("startTime",startTime)
			convertedLine.Put("endTime",endTime)
			convertedLines.Add(convertedLine)
		Next
		index = index + 1
	Next
	currentProject.ReplaceLines(convertedLines)
End Sub

Private Sub SortedSRTFiles(srtFiles As List) As List
	Dim firstFilename As String = srtFiles.Get(0)
	Dim newFilesList As List
	newFilesList.Initialize
	For i = 0 To srtFiles.Size-1
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("segment-")
		sb.Append(NumberFormat(i,5,0).Replace(",",""))
		If firstFilename.Contains(".wav") Then
			sb.Append(".wav")
		End If
		sb.Append(".srt")
		newFilesList.Add(sb.ToString)
	Next
	Return newFilesList
End Sub

Private Sub SortedWavFiles(wavfiles As List) As List
	Dim newFilesList As List
	newFilesList.Initialize
	For i = 0 To wavfiles.Size-1
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("segment-")
		sb.Append(NumberFormat(i,5,0).Replace(",",""))
		sb.Append(".wav")
		newFilesList.Add(sb.ToString)
	Next
	Return newFilesList
End Sub

Private Sub ImportFromXLIFF(path As String)
	Dim segments As List = XLIFF.Import(path)
	For i = 0 To currentProject.lines.Size - 1
		Dim segment As List = segments.Get(i)
		If i <= segments.Size - 1 Then
			Dim source As String = segment.Get(0)
			Dim target As String = segment.Get(1)
			Dim line As Map = currentProject.lines.Get(i)
			line.Put("source",source)
			line.Put("target",target)
		Else
			Exit
		End If
	Next
End Sub

Private Sub ImportFromPlainTXT(path As String,isSource As Boolean)
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	Dim i As Int
	For Each line As String In Regex.Split(CRLF,content)
		line = Exporter.Unescape(line)
		Dim lineMap As Map = currentProject.GetLine(i)
		If isSource Then
			lineMap.Put("source",line)
		Else
			lineMap.Put("target",line)
		End If
		i = i + 1
	Next
End Sub

Private Sub ImportFromTXT(path As String)
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	For Each line As String In Regex.Split(CRLF,content)
		Dim values() As String = Regex.Split("	",line)
		Dim startTime As String = values(0)
		Dim endTime As String = values(1)
		Dim source As String = Exporter.Unescape(values(2))
		Dim target As String = Exporter.Unescape(values(3))
		currentProject.AddLine(startTime,endTime,source,target)
	Next
End Sub

Private Sub ImportFromSRT(path As String,option As Int)
	Dim parser As SrtParser
	parser.Initialize
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	Dim lines As List = parser.Parse(content)
	If option = 0 Then
		currentProject.Clear
		For Each line As SpeechLine In lines
			Dim startTime As String = line.startTime
			Dim endTime As String = line.endTime
			Dim source As String = line.text
			Dim target As String
			If line.text.Contains(CRLF) Then
				source = Regex.Split(CRLF,line.text)(0)
				target = Regex.Split(CRLF,line.text)(1)
			End If
			currentProject.AddLine(startTime,endTime,source,target)
		Next
	Else
		Dim index As Int
		For Each line As SpeechLine In lines
			Dim text As String = line.text
			Dim lineMap As Map = currentProject.GetLine(index)
			If option = 1 Then
				lineMap.Put("source",text)
			Else
				lineMap.Put("target",text)
			End If
			index = index + 1
		Next
	End If
End Sub

public Sub LoadLinesToTable
	Dim data As List
	data.Initialize
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		index = index + 1
		Dim row(5) As String
		row(0) = index.As(String)
		row(1) = line.Get("startTime")
		row(2) = line.Get("endTime")
		row(3) = line.Get("source")
		row(4) = line.Get("target")
		data.Add(row)
	Next
	LinesTable.SetData(data)
End Sub

private Sub SetWrapText
	LinesTable.RowHeight = 50dip
	LinesTable.BuildLayoutsCache(LinesTable.MaximumRowsPerPage)
	Dim titles As List = Array(loc.Localize("Source"),loc.Localize("Target"))
	For Each title As String In titles
		Dim col As B4XTableColumn = LinesTable.GetColumn(title)
		For i = 1 To col.CellsLayouts.Size - 1
			Dim p As B4XView = col.CellsLayouts.Get(i)
			Dim lbl As Label = p.GetView(col.LabelIndex)
			lbl.WrapText = True
		Next
	Next
End Sub

Sub LinesTable_CellClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,False)
End Sub

Sub LinesTable_CellLongClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,True)
	Dim col As B4XTableColumn = LinesTable.GetColumn(ColumnId)
	Dim i As Int = LinesTable.VisibleRowIds.IndexOf(RowId)
	Dim cell As B4XView = col.CellsLayouts.Get(i)
	Dim jo As JavaObject = tableCM '<--------------------------- global ContextMenu object
	Dim x As Double' <----- global JavaObject object
	Dim y As Double
	If Utils.DetectOS = "mac" Or robot.IsInitialized = False Then
		Dim m As Map = Utils.GetScreenPosition(cell)
		x = m.Get("x") + cell.Width/2
		y = m.Get("y") + cell.Height/2
	Else
		x = robot.RunMethod("getMouseX",Null)' <----- global JavaObject object
		y = robot.RunMethod("getMouseY",Null)
	End If
	jo.RunMethod("show", Array(cell, x, y))
End Sub

Private Sub ResetSelectStatusOfLineTable
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If i Mod 2 = 0 Then
				pnl.Color = LinesTable.EvenRowColor
			Else
				pnl.Color = LinesTable.OddRowColor
			End If
		Next
	Next
End Sub

Sub SelectRow(targetRowId As Int,fromLongClick As Boolean)    'rowid-1
	Dim color As Int = xui.Color_RGB(119,198,255)
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		Dim RowId As Long = LinesTable.VisibleRowIds.Get(i)
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If RowId = targetRowId Then
				pnl.Color=color
			Else
				If i Mod 2 = 0 Then
					pnl.Color = LinesTable.EvenRowColor
				Else
					pnl.Color = LinesTable.OddRowColor
				End If
			End If
		Next
	Next
	selectedRowID = targetRowId
	LoadLineToEditor(fromLongClick)
	UpdateSubtitleLabel
	If ReadyToDrawWaveForm Then
		wait for (DrawWaveForm) complete (done As Object)
		SetTheRangeForTheSelectedRow
	End If
End Sub

private Sub UpdateSubtitleLabel
	If DisplaySubtitleCheckBox.Checked Then
		Dim format As Int = Utils.getPref("subtitle_format",0)
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		Dim text As String
		Select format
			Case 0
				text = line.Get("source")&CRLF&line.Get("target")
			Case 1
				text = line.Get("target")&CRLF&line.Get("source")
			Case 2	
				text = line.Get("source")
			Case 3
				text = line.Get("target")
		End Select
		SubtitleLabel.Text = text
		ApplySubtitleLabelStyle
	End If
End Sub

Private Sub SetTheRangeForTheSelectedRow
	Dim padding As Int = 1000 '1 seconds padding
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim endTime As String = line.get("endTime")
	Dim endTimeMs As Long
	If KeepRatioCheckBox.Checked And overviewRange.time <> 0 Then
		endTimeMs = startTimeMs + overviewRange.time
	Else
		endTimeMs = Utils.GetMillisecondsFromTimeString(endTime)
	End If
	Dim paddedStartTimeMs As Long = Max(0,startTimeMs - padding)
	Dim paddedEndTimeMs As Long = Min(endTimeMs + padding, vlc.GetLength)
	
	'duration for timestamp
	Dim lineDuration As Int = paddedEndTimeMs - paddedStartTimeMs
	
	Dim cutStartTimePercent As Double = (paddedStartTimeMs - cutStartTimeMs) / cutDurationMs
	Dim cutEndTimePercent As Double = (paddedEndTimeMs - cutStartTimeMs) / cutDurationMs
	overviewRange.setProgress(cutStartTimePercent,cutEndTimePercent)
	overviewRange.TriggerRangeChanged
	
	Dim overViewStartTime As Long  = cutStartTimePercent * cutDurationMs
	Dim startProgress As Double = (paddedStartTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	Dim endProgress As Double = (paddedEndTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	timestampRange.setProgress(startProgress,endProgress)
	DisplaySiblingRanges(overViewStartTime,lineDuration)
End Sub

private Sub DisplaySiblingRanges(overViewStartTime As Long,lineDuration As Long)
	Dim previousStartProgress As Double = -1
	Dim previousEndProgress As Double = -1
	Dim nextStartProgress As Double = -1
	Dim nextEndProgress As Double = -1
	If selectedRowID - 2 >= 0 Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 2)
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		previousStartProgress = (startTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
		previousEndProgress  = (endTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	End If
	If selectedRowID <= currentProject.lines.Size - 1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID)
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		nextStartProgress = (startTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
		nextEndProgress  = (endTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	End If
	timestampRange.setPreviousAndNextProgress(previousStartProgress,previousEndProgress,nextStartProgress,nextEndProgress)
End Sub

Private Sub ReadyToDrawWaveForm As Boolean
	Return currentProject.IsInitialized And selectedRowID <> - 1 And EnableWaveFormCheckBox.Checked And vlc.Stopped = False
End Sub

Private Sub WaveFormPane_Resize (Width As Double, Height As Double)
	timestampRange.Pane.SetSize(Width,Height/4*3)
	overviewRange.Pane.Top = Height/4*3
	overviewRange.Pane.SetSize(Width,Height/4)
	If ReadyToDrawWaveForm Then
		DrawWaveForm
	End If
End Sub

Private Sub GetWaveFilesToDraw As List
	Dim waveFilesToDraw As List
	waveFilesToDraw.Initialize
	Dim files As List = File.ListFiles(currentProject.GetTmpFolder)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim ms As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim wavIndex As Int = ms/1000/30
	Dim hasPrevious As Boolean
	If wavFiles.Size>0 Then
		If wavIndex - 1 >=0 Then
			hasPrevious = True
			waveFilesToDraw.Add(wavFiles.Get(wavIndex - 1))
		End If
		If wavIndex < wavFiles.Size Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex))
		End If
		If wavIndex + 1 <= wavFiles.Size - 1 Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex + 1))
		End If
	End If
	If hasPrevious Then
		cutStartTimeMs = (wavIndex-1) * 30 * 1000
	Else
		cutStartTimeMs = wavIndex * 30 * 1000
	End If
	Return waveFilesToDraw
End Sub

Private Sub DrawWaveForm As ResumableSub
	Log("DrawWaveForm")
	wait for (InitializeWaveFormCreatorIfNeeded) complete (done As Object)
	waveFormCreator.StartIndex = 0
	waveFormCreator.EndIndex = waveFormCreator.SampleLength - 1
	OverviewWaveFormImageView.SetImage(waveFormCreator.Draw(OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height))
	Return ""
End Sub

Private Sub ClearWaveForm
	Dim waveFormCreator As WaveFormBitmapCreator
	OverviewWaveFormImageView.SetImage(Null)
	WaveFormImageView.SetImage(Null)
End Sub

Private Sub InitializeWaveFormCreatorIfNeeded As ResumableSub
	Dim waveFiles As List = GetWaveFilesToDraw
	If waveFormCreator.IsInitialized Then
		Log("waveform creator initialized")
		Dim needReload As Boolean = False
		If waveFormCreator.Tag Is List Then
			Dim prevousList As List = waveFormCreator.Tag
			If prevousList.Get(0) <> waveFiles.Get(0) Then
				needReload = True
			End If
		End If
		If needReload Then
			Log("reinit waveform creator")
			wait for (LoadDataFromWaveFiles(waveFiles)) complete (data() As Short)
			waveFormCreator.Initialize(data)
			waveFormCreator.Tag = waveFiles
		End If
	Else
		wait for (LoadDataFromWaveFiles(waveFiles)) complete (data() As Short)
		waveFormCreator.Initialize(data)
		waveFormCreator.Tag = waveFiles
	End If
	Return ""
End Sub

Private Sub LoadDataFromWaveFiles(waveFiles As List) As ResumableSub
	Dim totalDuration As Int = 0
	For Each filename As String In waveFiles
		Dim wavRaf As WavRandomAccessFile
		wavRaf.Initialize(currentProject.GetTmpFolder,filename)
		totalDuration = totalDuration + wavRaf.Duration_ms
	Next
	cutDurationMs = totalDuration
	
	Dim shortsArray As List
	shortsArray.Initialize
	wait for (FFMpeg.CutWav(currentProject.GetTmpFolder,"audio.wav","cut.wav", _ 
	                                                    Utils.GetTimeStringFromMilliseconds(cutStartTimeMs), _ 
	                                                    Utils.GetTimeStringFromMilliseconds(cutStartTimeMs+cutDurationMs))) complete (done As Object)
	Dim wavRaf As WavRandomAccessFile
	wavRaf.Initialize(currentProject.GetTmpFolder,"cut.wav")
	shortsArray.AddAll(wavRaf.Read16bitAsShort(wavRaf.DataChunkEnd - wavRaf.DataChunkStart,44))
	Dim shorts(shortsArray.Size) As Short
	Dim index As Int = 0
	For Each value As Short In shortsArray
		shorts(index) = value
		index = index + 1
	Next
	
	Return shorts
End Sub

Private Sub overviewRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		waveFormCreator.StartIndex = startProgress*waveFormCreator.SampleLength
		waveFormCreator.EndIndex = Min(endProgress*waveFormCreator.SampleLength, waveFormCreator.SampleLength - 1)
		WaveFormImageView.SetImage(waveFormCreator.Draw(WaveFormImageView.Width,WaveFormImageView.Height))
		Dim overViewStartTime As Long  = startProgress * cutDurationMs
		Dim overViewEndTime As Long = endProgress * cutDurationMs
		Dim clipTime As Long = overViewEndTime - overViewStartTime
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
		Dim endTime As Long = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
		Dim newStartProgress As Double = (startTime - overViewStartTime -cutStartTimeMs) / clipTime
		Dim newEndProgress As Double = (endTime - overViewStartTime -cutStartTimeMs) / clipTime
		timestampRange.setProgress(newStartProgress,newEndProgress)
		DisplaySiblingRanges(overViewStartTime, clipTime)
	End If
End Sub

Private Sub overviewRange_MouseDragged(startProgress As Double,endProgress As Double)
	Dim overViewStartTime As Long  = startProgress * cutDurationMs
	Dim overViewEndTime As Long = endProgress * cutDurationMs
	Dim clipTime As Long = overViewEndTime - overViewStartTime
	overviewRange.time = clipTime
End Sub

Private Sub timestampRange_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount = 2 Then
		newLineHereMI_Action
	else if EventData.PrimaryButtonPressed Then
		Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
		vlc.SetTime(time)
	End If
End Sub

Private Sub timestampRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime -startTime
		Dim clipStartTime As Long = clipTime * startProgress + startTime + cutStartTimeMs
		Dim clipEndTime As Long = clipTime * endProgress + startTime + cutStartTimeMs
		StartTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipStartTime)
		EndTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipEndTime)
	End If
End Sub

Private Sub overviewRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim time As Long  = mouseMoveProgress * cutDurationMs + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(time)
	End If
End Sub

Private Sub timestampRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime - startTime
		Dim clipMouseMoveTime As Long = clipTime * mouseMoveProgress + startTime + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(clipMouseMoveTime)
	End If
End Sub

Sub pretranslate(options As Map) As ResumableSub
	If options.Get("type")<>"" Then
		If options.Get("type")="MT" Then
			Dim sourceLang As String
			Dim targetLang As String
			Dim mtengine As String=options.Get("engine")
			sourceLang=currentProject.SourceLang
			targetLang=currentProject.TargetLang
			Dim interval As Int=options.GetDefault("interval",0)
			wait for (MT.supportBatchTranslation(mtengine)) Complete (BatchSupported As Boolean)
			progressDialog.Show(loc.Localize("translating..."))
			If BatchSupported Then
				Dim index As Int = 0
				Dim segmentationResult As Map = MT.readLinesInSegmentsForTranslation(currentProject.lines)
				Dim linesToTranslate As List = segmentationResult.Get("lines")
				Dim segments As List = segmentationResult.Get("segments")
				For Each sourceList As List In segments
					index = index + 1
					progressDialog.update(index-1,segments.Size)
					If progressDialog.isShowing = False Then
						Exit
					End If
					wait for (MT.batchTranslate(sourceList,sourceLang,targetLang,mtengine)) complete (targetList As List)
					Dim j As Int = 0
					For Each target As String In targetList
						Dim line As Map = linesToTranslate.Get(j)
						line.Put("target",target)
						j = j + 1
					Next
					For j = sourceList.Size - 1 To 0 Step -1 
						linesToTranslate.RemoveAt(j)
					Next
					Sleep(interval)
				Next
			Else
				Dim index As Int = 0
				For Each line As Map In currentProject.lines
					index = index + 1
					progressDialog.update(index-1,currentProject.lines.Size)
					If progressDialog.isShowing = False Then
						Exit
					End If
					Dim source As String = line.Get("source")
					Dim target As String = line.Get("target")
					If target = "" Then
						wait for (MT.getMT(source,sourceLang,targetLang,mtengine)) complete (target As String)
						line.Put("target",target)
						Sleep(interval)
					End If
				Next
			End If
			
			progressDialog.close
		Else
			progressDialog.Show(loc.Localize("matching……"))
			Sleep(0)
			fillWithExactMatch
			progressDialog.close
		End If
	End If
	LoadLinesToTable
	Return ""
End Sub


private Sub fillWithExactMatch
	Dim sourceTextMap As Map
	sourceTextMap.Initialize
	For Each line As Map In currentProject.lines
		Dim source As String = line.Get("source")
		Dim target As String = line.Get("target")
		If source <> "" And target <> "" Then
			sourceTextMap.Put(source,target)
		End If
	Next
	For Each line As Map In currentProject.lines
		Dim source As String = line.Get("source")
		Dim target As String = line.Get("target")
		If source <> "" And target = "" Then
			If sourceTextMap.ContainsKey(source) Then
				line.Put("target",sourceTextMap.Get(source))
			End If
		End If
	Next
	currentProject.AddState
End Sub

Private Sub Save
	If currentProject.IsInitialized Then
		currentProject.save
	End If
End Sub

Private Sub Close
	StopPlaying
	LinesTable.SetData(Array())
	selectedRowID = -1
	ResetSelectStatusOfLineTable
	ClearWaveForm
	Dim currentProject As Project
End Sub

Private Sub SelectFile
	Dim fc As FileChooser
	fc.Initialize
	Dim path As String = fc.ShowOpen(MainForm)
	If path.Contains(" ") And Utils.DetectOS <> "windows"  Then
		fx.Msgbox(MainForm,loc.Localize("The path should not contain spaces"),"")
		Return
	End If
	OpenFile(path,True)
End Sub

Private Sub OpenFile(path As String,showLanguageSelector As Boolean)
	If File.Exists(path,"") Then
		If currentProject.IsInitialized Then
			Dim currentProject As Project
			selectedRowID = -1
			ResetSelectStatusOfLineTable
			ClearWaveForm
		End If
		Dim isNew As Boolean = currentProject.Initialize(path,Me,"currentProject")
		If isNew And showLanguageSelector Then
			Dim langSelector As LanguagePairSelector
			langSelector.Initialize
			Dim langpairMap As Map = langSelector.ShowAndWait
			currentProject.SourceLang=langpairMap.Get("source")
			currentProject.TargetLang=langpairMap.Get("target")
		End If
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
		PlayFile(path)
		LoadLinesToTable
	End If
End Sub

Private Sub ShowBatchTranslator
	Dim translator As BatchTranslator
	translator.Initialize(currentProject)
    translator.Show
End Sub

public Sub TranslateOneFile(settings As Map,filepath As String,mtOptions As Map,ASRMethod As Int) As ResumableSub
	OpenFile(filepath,False)
	If vlc.IsPlaying Then
		vlc.Pause
		TogglePlayingStatus(False,-1)
	End If
	currentProject.settings = settings
	If ASRMethod = 0 Then
		wait for (RecognizeSpeechByFixedSpan) complete (done As Object)
	Else if ASRMethod = 1 Then
		wait for (RecognizeExistingLines) complete (done As Object)
	Else
		wait for (RecognizeWholeSpeech) complete (done As Object)
	End If
	wait for (pretranslate(mtOptions)) complete (done As Object)
	currentProject.save
	Return True
End Sub

Private Sub currentProject_Changed(changed As Boolean)
	If changed Then
		MainForm.Title = "Silhouette*"
	Else
		MainForm.Title = "Silhouette"
	End If
End Sub

Private Sub PlayFile(path As String)
	If vlc.IsPlaying Then
		vlc.Stop
	End If
	VLCImageView.SetImage(Null)
	ProgressSlider.tag = False
	ProgressSlider.Value = 0
	'vlc.PlayWithOptions(path,Array As String(":file-caching=10000"))
	vlc.Play(path)
	player.Initialize("player",File.GetUri(currentProject.GetTmpFolder,"audio.wav"))
	ProgressSlider.tag = True
	Sleep(0)
	Do While VLCImageView.GetImage.IsInitialized == False
		Sleep(100)
	Loop
	TogglePlayingStatus(True,vlc.GetTime)
	vlc.SetMute(False)
	ResizeVLCImageView(VLCPane.Width,VLCPane.Height)
	TotalTimeLabel.Text = Utils.GetCompactTimeStringFromMilliseconds(vlc.GetLength)
End Sub

Sub Progress_MouseExited_Event (MethodName As String, Args() As Object) As Object
	ProgressContextMenu.MenuItems.Clear
	Return Null
End Sub

Sub Progress_MouseClicked_Event (MethodName As String, Args() As Object) As ResumableSub
	If vlc.IsPlayable = False Then
		Return Null
	End If
	If vlc.IsSeekable = False Then
		fx.Msgbox(MainForm,loc.Localize("Not seekable"),"")
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	ProgressSlider.Enabled = False
	ProgressSlider.Value = percent * 100
	vlc.SetPosition(percent)
	ProgressLabel.Text = Utils.GetCompactTimeStringFromMilliseconds(vlc.GetLength*percent)
	If ProgressTimer.Enabled = True Then 'playing status
		TogglePlayingStatus(True,vlc.GetLength*percent)
	Else
		TogglePlayingStatus(False,-1)
	End If
	ProgressContextMenu.MenuItems.Clear
	e.Consume
	Sleep(0)
	ProgressSlider.Enabled = True
	Return Null
End Sub

Sub Progress_MouseMoved_Event (MethodName As String, Args() As Object) As Object
	If vlc.IsPlayable = False Then
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	Dim time As Long = percent * vlc.GetLength
	ProgressContextMenu.MenuItems.Clear
	Dim mi As MenuItem
	mi.Initialize(Utils.GetCompactTimeStringFromMilliseconds(time),"")
	ProgressContextMenu.MenuItems.Add(mi)
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ProgressSlider)
	Dim jo As JavaObject = ProgressContextMenu
	jo.RunMethod("show", Array(ProgressSlider, map1.Get("x")+e.X, map1.Get("y")-40))
	Return Null
End Sub

Private Sub VLCPane_Resize (Width As Double, Height As Double)
	ResizeVLCImageView(Width,Height)
End Sub

Private Sub ResizeVLCImageView(Width As Double, Height As Double)
	Dim img As Image = VLCImageView.GetImage
	If img.IsInitialized Then
		Dim ratio As Double = img.Width/img.Height
		VLCImageView.Height = Height
		VLCImageView.Width = Width

		If Utils.getPref("match_sutitle_with_video",False)=False Then
			SubtitleLabel.Left = 0
			SubtitleLabel.PrefWidth = VLCImageView.Width
		End If
		
		If img.Width/img.Height < Width/Height Then '16:9 4:3
			Dim desiredWidth As Double = VLCImageView.Height * ratio
			VLCImageView.Left = (Width - desiredWidth) / 2
			If Utils.getPref("match_sutitle_with_video",False) Then
				Dim padding As Int = 10
				SubtitleLabel.PrefWidth = desiredWidth - padding * 2
				SubtitleLabel.Left = VLCImageView.Left + padding
			End If
		Else
			Dim desiredHeight As Double = VLCImageView.Width / ratio
			VLCImageView.Top = (Height - desiredHeight) / 2
			If Utils.getPref("match_sutitle_with_video",False) Then
				SubtitleLabel.Left = 0
				SubtitleLabel.PrefWidth = VLCImageView.Width
			End If
		End If
		SetSubtitleLabelFontSize
	End If
End Sub

Private Sub ExitApp
	'vlc.stop
	cleanupHook
	Try
		vlc.release
	Catch
		Log(LastException)
	End Try
	ExitApplication
End Sub

Private Sub VolSlider_ValueChange (Value As Double)
	Log(Value)
	vlc.SetVolume(Value)
	player.Volume = Value / 100
End Sub

Private Sub StopButton_MouseClicked (EventData As MouseEvent)
	StopPlaying
End Sub

Private Sub StopPlaying
	vlc.Stop
	player.Stop
	TogglePlayingStatus(False,-1)
End Sub

Private Sub PlayButton_MouseClicked (EventData As MouseEvent)
	TogglePlaying
End Sub

Private Sub TogglePlaying
	If vlc.IsPlaying Then
		vlc.Pause
		player.Pause
		TogglePlayingStatus(False,-1)
	Else
		vlc.Resume
		Do While vlc.IsPlaying = False
			Sleep(100)
		Loop
		vlc.SetMute(False)
		TogglePlayingStatus(True,vlc.GetTime)
	End If
	continuousMode = False
End Sub

Private Sub TogglePlayingStatus(isPlaying As Boolean,startTime As Long)
	loopMode = False
	If isPlaying Then
		vlc.SetVolume(VolSlider.Value)
		player.Volume = VolSlider.Value / 100
		VLCPane.PrefWidth  = VLCPane.Width + 1
		VLCPane.PrefWidth  = VLCPane.Width - 1
		PlayButton.Text = ""
		ProgressTimer.Enabled = True
		playbackStartDate = DateTime.Now
		If startTime = -1 Then
			playbackStartTime = vlc.GetTime
		Else
			playbackStartTime = startTime
		End If
	Else
		vlc.SetMute(False)
		PlayButton.Text = ""
		ProgressTimer.Enabled = False
		expectedEndTime = -1
		playbackStartDate = -1
		playbackStartTime = -1
	End If
End Sub

Private Sub GetCurrentVideoTime As Long
	Dim currentVideoTime As Long 
	If playbackStartDate <> -1 Then
		currentVideoTime = playbackStartTime + (DateTime.Now - playbackStartDate)*vlc.Rate
	Else
		currentVideoTime = vlc.GetTime
	End If
	Return currentVideoTime
End Sub

Private Sub ProgressTimer_Tick
	If vlc.IsPlaying Then
		Dim currentVideoTime As Long = GetCurrentVideoTime
		'currentVideoTime = currentVideoTime + 100
		
		If FollowProgressCheckBox.Checked Then
			Dim rowID As Int = FindTheRowIDOfTime(currentVideoTime)
			If rowID <> selectedRowID And rowID <> -1 Then
				selectedRowID = rowID
				JumpToRow(rowID,0)
			End If
			If rowID = -1 Then
				If DisplaySubtitleCheckBox.Checked Then
					SubtitleLabel.Text = ""
				End If
			End If
		End If
		
		If currentVideoTime > expectedEndTime And expectedEndTime <> -1 And playbackStartDate <> -1 Then
			If loopMode Then
				loopMI_Action
			Else
				If FollowProgressCheckBox.Tag Is Boolean Then
					FollowProgressCheckBox.Checked = FollowProgressCheckBox.Tag
					FollowProgressCheckBox.Tag = Null
				End If
				expectedEndTime = -1
				playbackStartTime = -1
				playbackStartDate = -1
				vlc.Pause
				player.Pause
				TogglePlayingStatus(False,-1)
				If continuousMode Then
					If selectedRowID < currentProject.lines.Size Then
						SelectRow(selectedRowID + 1,True)
						PlayLineByID(selectedRowID)
					Else
						continuousMode = False
					End If
				End If
			End If
		End If
		
		ProgressSlider.Tag = False
		DrawPositionLineInWaveForm(currentVideoTime)
		ProgressLabel.Text = Utils.GetCompactTimeStringFromMilliseconds(vlc.GetTime)
		ProgressSlider.Value = vlc.GetTime/vlc.GetLength * 100
		Sleep(0)
		ProgressSlider.Tag = True
	Else
		vlc.Stopped = True
		TogglePlayingStatus(False,-1)
	End If
End Sub

Private Sub DrawPositionLineInWaveForm(time As Long)
	If ReadyToDrawWaveForm Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		If startTimeMs >= cutStartTimeMs And startTimeMs <= cutStartTimeMs + cutDurationMs Then
			overviewRange.PlayTimeProgress = (time - cutStartTimeMs) / cutDurationMs
			Dim clipStartTime As Long  = overviewRange.StartProgress * cutDurationMs
			Dim clipEndTime As Long = overviewRange.EndProgress * cutDurationMs
			Dim clipTime As Long = clipEndTime - clipStartTime
			timestampRange.PlayTimeProgress = (time - cutStartTimeMs - clipStartTime) / clipTime
			If timestampRange.StopProgress <> -1 Then
				If timestampRange.PlayTimeProgress > timestampRange.StopProgress Then
					vlc.Pause
					TogglePlayingStatus(False,-1)
				End If
			End If
		End If
	End If
End Sub

Private Sub WaveFormPane_MouseClicked (EventData As MouseEvent)
	Dim view As Node = Sender
	Dim jo As JavaObject = EventData
	If EventData.SecondaryButtonPressed And EnableWaveFormCheckBox.Checked Then
		RightClickTarget = jo.RunMethod("getTarget",Null)
		Dim isTimestampRange As Boolean = False
		If RightClickTarget Is ImageView Then
			Dim iv As ImageView = RightClickTarget
			isTimestampRange = (iv == timestampRange.ImageView)
		End If
		SetWaveFormContextMenuItems(isTimestampRange)
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = WaveFormContextMenu
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	End If
End Sub

Private Sub SetWaveFormContextMenuItems(isTimestampRange As Boolean)
	WaveFormContextMenu.MenuItems.Clear
	If isTimestampRange Then
		Dim playMi As MenuItem
		playMi.Initialize(loc.Localize("Play the selection"),"playSelectionMI")
		WaveFormContextMenu.MenuItems.Add(playMi)
		Dim playSelectionHereMi As MenuItem
		playSelectionHereMi.Initialize(loc.Localize("Play the selection from here"),"playSelectionHereMI")
		WaveFormContextMenu.MenuItems.Add(playSelectionHereMi)
	End If
	Dim playHereMi As MenuItem
	playHereMi.Initialize(loc.Localize("Play from here"),"playHereMI")
	WaveFormContextMenu.MenuItems.Add(playHereMi)
	If isTimestampRange Then
		Dim playNextLineMI As MenuItem
		playNextLineMI.Initialize(loc.Localize("Play the next line"),"playNextLineMI")
		WaveFormContextMenu.MenuItems.Add(playNextLineMI)
		Dim playPreviousLineMI As MenuItem
		playPreviousLineMI.Initialize(loc.Localize("Play the previous line"),"playPreviousLineMI")
		WaveFormContextMenu.MenuItems.Add(playPreviousLineMI)
		Dim splitHereMI As MenuItem
		splitHereMI.Initialize(loc.Localize("Split here"),"splitHereMI")
		WaveFormContextMenu.MenuItems.Add(splitHereMI)
		Dim setStopPointMi As MenuItem
		setStopPointMi.Initialize(loc.Localize("Set stop point"),"setStopPointMI")
		WaveFormContextMenu.MenuItems.Add(setStopPointMi)
		Dim clearStopPointMi As MenuItem
		clearStopPointMi.Initialize(loc.Localize("Clear stop point"),"clearStopPointMI")
		WaveFormContextMenu.MenuItems.Add(clearStopPointMi)
		Dim newLineHereMI As MenuItem
		newLineHereMI.Initialize(loc.Localize("Create a new line here"),"newLineHereMI")
		WaveFormContextMenu.MenuItems.Add(newLineHereMI)
		Dim loopMI As MenuItem
		loopMI.Initialize(loc.Localize("Loop the selection"),"loopMI")
		WaveFormContextMenu.MenuItems.Add(loopMI)
	Else
		Dim recognizeMI As MenuItem
		recognizeMI.Initialize(loc.Localize("Recognize the selection"),"recognizeMI")
		WaveFormContextMenu.MenuItems.Add(recognizeMI)
	End If
End Sub

Private Sub playNextLineMI_Action
	SelectRow(selectedRowID + 1,True)
	PlayLineByID(selectedRowID)
End Sub

Private Sub playPreviousLineMI_Action
	SelectRow(selectedRowID - 1,True)
	PlayLineByID(selectedRowID)
End Sub

private Sub splitHereMI_Action
	If selectedRowID <> -1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		Dim source As String = line.Get("source")
		Dim target As String = line.Get("target")
		Dim appendedLine As Map = currentProject.AppendLineWithTime(selectedRowID - 1,AudioProgressLabel.Text,line.get("endTime"))
		line.Put("endTime",AudioProgressLabel.Text)
		If source <> "" Or target <> "" Then
			Dim splitter As SentenceSplitter
			splitter.Initialize(currentProject.SourceLang)
			splitter.SetCheckboxVisibility(False)
			splitter.SetText(source,target)
			Dim result As Map
			result = splitter.ShowAndWait
			Dim adjustedSource As String = result.Get("source")
			Dim adjustedTarget As String = result.Get("target")
			Dim splittedSource() As String = Regex.Split(CRLF,adjustedSource)
			Dim splittedTarget() As String = Regex.Split(CRLF,adjustedTarget)
			If splittedSource.Length = 2 Then
				line.Put("source",splittedSource(0))
				appendedLine.Put("source",splittedSource(1))
			End If
			If splittedTarget.Length = 2 Then
				line.Put("target",splittedSource(0))
				appendedLine.Put("target",splittedSource(1))
			End If
		End If
		LoadLinesToTable
		SelectRow(selectedRowID,True)
	End If
End Sub

Private Sub setStopPointMI_Action
    timestampRange.StopProgress = timestampRange.LastMouseOverProgress
End Sub

Private Sub clearStopPointMI_Action
	timestampRange.StopProgress = -1
End Sub

Private Sub playHereMI_Action
	Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	vlc.SetTime(time)
	If vlc.IsPlaying = False Then
		vlc.Resume
	End If
	TogglePlayingStatus(True,time)
End Sub

Private Sub newLineHereMI_Action
	Dim rowID As Int = selectedRowID
	If rowID <> -1 Then
		Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
		Dim currentStartTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
		Dim append As Boolean
		If time < currentStartTime Then
			append = False
		Else
			append = True
		End If
		Dim startTime As String = AudioProgressLabel.Text
		Dim endTime As String = Utils.GetTimeStringFromMilliseconds(time + 1000)
		If append Then
			currentProject.AppendLineWithTime(rowID - 1,startTime,endTime)
		Else
			currentProject.PrependLineWithTime(rowID - 1,startTime,endTime)
		End If
		LoadLinesToTable
		If append Then
			SelectRow(rowID+1,True)
		Else
			SelectRow(rowID,True)
		End If
	End If
End Sub

Private Sub playSelectionMI_Action
	PlayLineByID(selectedRowID)
End Sub

private Sub loopMI_Action
	playSelectionMI_Action
	loopMode = True
End Sub

Private Sub playSelectionHereMI_Action
	FollowProgressCheckBox.Tag = FollowProgressCheckBox.Checked
	FollowProgressCheckBox.Checked = False
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	expectedEndTime = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True,startTime)
End Sub

private Sub recognizeMI_Action
	Dim startTime As String  = Utils.GetTimeStringFromMilliseconds(overviewRange.StartProgress * cutDurationMs + cutStartTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(overviewRange.EndProgress * cutDurationMs + cutStartTimeMs)
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchToTheLastTab
		End If
		Return
	End If
	progressDialog.Show(loc.Localize("Recognizing..."))
	progressDialog.update2(loc.Localize("Processing..."))

	Dim tmpDir As String = currentProject.GetTmpFolder
	
	If File.Exists(tmpDir,"audio.wav") = False Then
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
	End If

	wait for (ASR.RecognizeCutAsSpeechLines(tmpDir,"audio.wav",startTime,endTime,currentProject.SourceLang,engine)) complete (lines As List)
	Dim convertedLines As List
	convertedLines.Initialize
	For Each line As SpeechLine In lines
		Dim lineMap As Map
		lineMap.Initialize
		lineMap.Put("source",line.text)
		lineMap.Put("target","")
		lineMap.put("startTime",line.startTime)
		lineMap.put("endTime",line.endTime)
		convertedLines.Add(lineMap)
	Next
	currentProject.ReplaceLinesInRange(convertedLines,startTime,endTime)
	LoadLinesToTable
	progressDialog.close
End Sub


Sub MainForm_CloseRequest (EventData As Event)
	Log("We are closing the mainform")
	If currentProject.IsInitialized Then
		If currentProject.changed = True Then
			Dim result As Int
			result=fx.Msgbox2(MainForm,loc.Localize("Project changed. Save the project?"),"", _
			                           loc.Localize("Yes"), _ 
									   loc.Localize("Cancel"), _ 
									   loc.Localize("Exit without saving"),fx.MSGBOX_CONFIRMATION)
			Select result
				'yes -1, no -2, cancel -3
				Case fx.DialogResponse.POSITIVE
					currentProject.save
				Case fx.DialogResponse.CANCEL
					EventData.Consume
					Return
			End Select
		End If
	End If
	ExitApp
End Sub

Private Sub tableMenuItem_Action
	Dim mi As MenuItem = Sender
	Select loc.FindSource(mi.Text)
	    Case "Play this line"
			PlayTheSelectedLine
		Case "Play from this line"
			PlayFromTheSelectedLine
		Case "Prepend a line"
			PrependLine
			SelectRow(selectedRowID,True)
		Case "Append a line"
			AppendLine
			SelectRow(selectedRowID+1,True)
		Case "Delete this line"
			DeleteThisLine
		Case "Merge with the next line"
			MergeWithTheNextLine
			SelectRow(selectedRowID,True)
		Case "Recognize this line"
			RecognizeTheSelectedLine
	End Select
End Sub

Private Sub DeleteThisLine
	If currentProject.lines.Size > 0 Then
		currentProject.DeleteLine(selectedRowID - 1)
		LoadLinesToTable
		If LinesTable.Size - 1 >= selectedRowID And LinesTable.Size > 0 Then
			SelectRow(selectedRowID,True)
		End If
	End If
End Sub

Private Sub HasValidateModel As Boolean
	Dim path As String = ASR.GetModelPath
	Log(path)
	If File.Exists(path,"") Then
		Return True
	End If
	Return False
End Sub

Private Sub RecognizeTheSelectedLine
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchToTheLastTab
		End If
		Return
	End If
	progressDialog.Show(loc.Localize("Recognizing..."))
	progressDialog.update2(loc.Localize("Processing..."))
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = currentLine.Get("startTime")
	Dim endTime As String = currentLine.Get("endTime")
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	If File.Exists(tmpDir,"audio.wav") = False Then
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
	End If

	wait for (ASR.RecognizeCut(tmpDir,"audio.wav",startTime,endTime,currentProject.SourceLang,engine)) complete (str As String)
	
	SourceTextArea.Text = str
	progressDialog.close
End Sub

Private Sub PrependLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Max(0,Utils.GetMillisecondsFromTimeString(currentLine.Get("startTime"))-1*1000)
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.PrependLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

private Sub NewLine
	If selectedRowID <> -1 Then
		AppendLine
	Else
		currentProject.AppendLine(-1)
		LoadLinesToTable
	End If
End Sub

Private Sub SplitCurrentLine
	If selectedRowID <> -1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID-1)
		Dim splitter As SentenceSplitter
		splitter.Initialize(currentProject.SourceLang)
		splitter.SetText(line.Get("source"),line.Get("target"))
		Dim result As Map = splitter.ShowAndWait
		Dim lines As List = splitter.GetNewLines(line.Get("startTime"),line.Get("endTime"),currentProject.SourceLang,result.Get("source"),result.Get("target"),result.Get("calculateByWords"))
		currentProject.DeleteLine(selectedRowID - 1)
		InsertLines(selectedRowID - 1,lines)	
	End If
End Sub

Private Sub InsertLines(index As Int,lines As List)
	currentProject.InsertLines(index,lines)
	LoadLinesToTable
End Sub

Private Sub ShiftTime
	Dim selector As RangeSelector
	selector.Initialize
	selector.SetRange(1,currentProject.lines.Size)
	Dim range As LineRange = selector.ShowAndWait
	Dim startIndex As Int = range.startIndex
	Dim endIndex As Int = range.endIndex
	Dim inp As InputBox
	inp.Initialize
	inp.Title = loc.Localize("Please input the time offset in ms:")
	Dim shift As Int = inp.showAndWait(0)
	currentProject.ShiftInRange(shift,startIndex,endIndex)
	LoadLinesToTable
End Sub

Private Sub MoveUpCurrentLine
	Try
		currentProject.Switch(selectedRowID - 2, selectedRowID - 1)
		LoadLinesToTable
		SelectRow(selectedRowID - 1,True)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MoveDownCurrentLine
	Try
		currentProject.Switch(selectedRowID - 1, selectedRowID)
		LoadLinesToTable
		SelectRow(selectedRowID + 1,True)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MergeLines
	Dim inpBox As InputBox
	inpBox.Initialize
	inpBox.Title = loc.Localize("Please input how many words a line should have.")
	Dim wordNumber As Int = inpBox.showAndWait(5)
	Dim newLines As List
	newLines.Initialize
	Dim sourcePattern As String = " "
	If Utils.LanguageHasSpace(currentProject.SourceLang) = False Then
		sourcePattern = ""
	End If
	Dim targetPattern As String = " "
	If Utils.LanguageHasSpace(currentProject.TargetLang) = False Then
		targetPattern = ""
	End If
	Dim mergedLine As Map
	For Each line As Map In currentProject.lines
		Dim source As String = line.Get("source")
		Dim target As String = line.Get("target")
		Dim startTime As String = line.Get("startTime")
		Dim endTime As String = line.Get("endTime")
		If mergedLine.IsInitialized Then
			If mergedLine.Get("endTime") = startTime Then
				Dim sourceWhiteSpace As String = sourcePattern
				For Each c As String In Array("'",",",".","!","?",$"""$)
					If source.StartsWith(c) Then
						sourceWhiteSpace = ""
						Exit
					End If
				Next
				Dim mergedSource As String = (mergedLine.Get("source")&sourceWhiteSpace&source).Trim
				Dim mergedTarget As String = (mergedLine.Get("target")&targetPattern&target).Trim
				mergedLine.Put("source",mergedSource)
				mergedLine.Put("target",mergedTarget)
				mergedLine.Put("endTime",endTime)
				If Regex.Split(sourcePattern,mergedSource).Length>=wordNumber Then
					newLines.Add(mergedLine)
					mergedLine = Null
				End If
			Else
				newLines.Add(mergedLine)
				If Regex.Split(sourcePattern,source).Length<wordNumber Then
					mergedLine = line
				Else
					mergedLine = Null
					newLines.Add(line)
				End If
			End If
		Else
			If Regex.Split(sourcePattern,source).Length<wordNumber Then
				mergedLine = line
			Else
				newLines.Add(line)
			End If
		End If
	Next
	If mergedLine.IsInitialized Then
		newLines.Add(mergedLine)
	End If
	currentProject.ReplaceLines(newLines)
	LoadLinesToTable
End Sub

Private Sub BreakLines 
	Dim options As SplittingOptionsForm
	options.Initialize
	Dim result As Map = options.ShowAndWait
	If result.Size>0 Then
		Dim wordNumber As Int = result.GetDefault("word_number",5)
		Dim splitSentences As Boolean = result.GetDefault("split_sentences",False)
		Dim splitByWordNumber As Boolean = result.GetDefault("split_by_word_number",True)
		Dim srxPath As String
		If File.Exists(File.DirApp,"segmentationRules.srx") Then
			srxPath = File.Combine(File.DirApp,"segmentationRules.srx")
		End If
		Dim newLines As List
		newLines.Initialize
		Dim splitter As SentenceSplitter
		splitter.Initialize(currentProject.SourceLang)
		For Each line As Map In currentProject.lines
			Dim source As String = line.Get("source")
			Dim target As String = line.Get("target")
			Dim sentences As List
			If splitSentences Then
				wait for (segmentation.segmentedTxt(source,True,currentProject.SourceLang,srxPath,True)) complete (sentences As List)
			Else
				sentences.Initialize
				sentences.Add(source)
			End If
			Dim sb As StringBuilder
			sb.Initialize
			For Each sentence As String In sentences
                sb.Append(sentence.Trim)
				sb.Append(CRLF)
			Next
			
			Dim linesInSentenceLevel As List = splitter.GetNewLines(line.Get("startTime"),line.Get("endTime"),currentProject.SourceLang,sb.ToString.Trim,target,True)
			
			If splitByWordNumber Then
				For Each lineInSentenceLevel As Map In linesInSentenceLevel
					Dim segments As List = BreakLineBasedOnWordNumber(lineInSentenceLevel.Get("source"),currentProject.SourceLang,wordNumber)
					Dim sb As StringBuilder
					sb.Initialize
					For Each segment As String In segments
						sb.Append(segment).Append(CRLF)
					Next
					Dim lines As List = splitter.GetNewLines(lineInSentenceLevel.Get("startTime"),lineInSentenceLevel.Get("endTime"),currentProject.SourceLang,sb.ToString.Trim,lineInSentenceLevel.Get("target"),True)
					newLines.AddAll(lines)
				Next
			Else
				newLines.AddAll(linesInSentenceLevel)
			End If
		Next
		currentProject.ReplaceLines(newLines)
		LoadLinesToTable
	End If
End Sub

Private Sub BreakLineBasedOnWordNumber(str As String,sourceLang As String,wordNumber As Int) As List
	Dim segments As List
	segments.Initialize
	Dim segment As List
	segment.Initialize
	Dim pattern As String = " "
	If Utils.LanguageHasSpace(sourceLang) = False Then
		pattern = ""
	End If
	For Each word As String In Regex.Split(pattern,str)
		segment.Add(word)
		If segment.Size >= wordNumber Then
			Dim sb As StringBuilder
			sb.Initialize
			For Each w As String In segment
				sb.Append(w)
				sb.Append(pattern)
			Next
			segments.Add(sb.ToString.Trim)
			segment.Initialize
		End If
	Next
	If segment.Size>0 Then
		Dim sb As StringBuilder
		sb.Initialize
		For Each w As String In segment
			sb.Append(w)
			sb.Append(pattern)
		Next
		segments.Add(sb.ToString.Trim)
	End If
	Return segments
End Sub

Private Sub SortLines
	selectedRowID = -1
	currentProject.Sort
	LoadLinesToTable
End Sub

Private Sub ClearLines
	selectedRowID = -1
	currentProject.Clear
	LoadLinesToTable
End Sub

Private Sub ClearEmptyLines
	selectedRowID = -1
	currentProject.ClearEmptyLines
	LoadLinesToTable
End Sub

Private Sub MergeWithTheNextLine
	If selectedRowID <> -1 Then
		currentProject.MergeWithTheNextLine(selectedRowID - 1)
		SelectRow(selectedRowID,True)
		LoadLinesToTable
	End If
End Sub

Private Sub AppendLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(currentLine.Get("endTime"))
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.AppendLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

Private Sub PlayTheSelectedLine
	PlayLineByID(selectedRowID)
End Sub

Private Sub PlayFromTheSelectedLine
	PlayFromLineByID(selectedRowID)
End Sub

Private Sub PlayFromLineByID(rowID As Int)
	Try
		Dim line As Map = currentProject.GetLine(rowID - 1)
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		vlc.Resume
		vlc.SetTime(startTime)
		TogglePlayingStatus(True,startTime)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub PlayEveryLine
	continuousMode = True
	SelectRow(1,True)
	PlayLineByID(1)
End Sub

Private Sub PlayLineByID(rowID As Int) As ResumableSub
	FollowProgressCheckBox.Tag = FollowProgressCheckBox.Checked
	Try
		FollowProgressCheckBox.Checked = False
		Dim precise As Boolean = Utils.getPref("precise_play_of_selection",False)
		If precise Then
			vlc.SetMute(True)
		Else
			vlc.SetMute(False)
		End If
		Dim line As Map = currentProject.GetLine(rowID - 1)
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		expectedEndTime = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		vlc.Resume
		If precise Then
			Do While vlc.IsPlaying = False
				Sleep(100)
			Loop
			vlc.SetMute(True)
		End If
		vlc.SetTime(startTime)
		If precise Then
			player.Volume = VolSlider.Value/100
			player.Position = startTime
			player.Play
		End If
		TogglePlayingStatus(True,startTime)
	Catch
		Log(LastException)
	End Try
	Return ""
End Sub

Private Sub LoadLineToEditor(fromLongClick As Boolean)
	isLongClick = fromLongClick
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	SourceTextArea.Text = line.Get("source")
	TargetTextArea.Text = line.Get("target")
	StartTimeTextField.Text = line.Get("startTime")
	EndTimeTextField.Text = line.Get("endTime")
	If fromLongClick = False Then
		clearTMandMT
		ShowMT(SourceTextArea.Text,True)
	End If
	Sleep(200)
	isLongClick = False
End Sub

Private Sub clearTMandMT
	TMTableView.Items.Clear
	TMTextArea.Text=""
End Sub

Private Sub ShowMT(sourceText As String,fromTextArea As Boolean)
	If SourceTextArea.Text = "" Then
		Return
	End If
	Dim preferencesMap As Map = Utils.getPrefMap
	If preferencesMap.ContainsKey("mt") Then
		Dim mtPreferences As Map=preferencesMap.Get("mt")
		For Each engine As String In MT.getMTList
			If mtPreferences.GetDefault(engine&"_enabled",False)=True Then
				appendSingleMTResult(sourceText,fromTextArea,engine)
			End If
		Next
	End If
End Sub

Private Sub appendSingleMTResult(sourceText As String,fromTextArea As Boolean,engine As String)
	wait for (MT.getMT(sourceText,currentProject.SourceLang,currentProject.TargetLang,engine)) Complete (target As String)
	If fromTextArea And sourceText <> SourceTextArea.Text Then
		Return
	End If
	Dim lbl As Label
	lbl.Initialize("lbl")
	lbl.Text=target
	lbl.TooltipText=target
	Dim row() As Object
	row=Array("","",lbl,engine)
	Log(target)
	TMTableView.Items.Add(row)
End Sub


Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If TMTableView.SelectedRow=-1 Then
		Return
	End If
	If TMTableView.SelectedRowValues=Null Then
		Return
	End If
	Dim lbl As Label=TMTableView.SelectedRowValues(2)
	If EventData.ClickCount=2 Then
		TargetTextArea.Text=lbl.Text
	Else if EventData.ClickCount=1 Then
		TMTextArea.Text=lbl.Text
	End If
End Sub

Private Sub UpdateTime(isStartTime As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	
	If isLongClick Then
		Return
	End If
	
	If selectedRowID = -1 Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isStartTime Then
		line.Put("startTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${StartColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("endTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${EndColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
	currentProject.AddState
End Sub

Private Sub UpdateText(isSource As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	If isLongClick Then
		Return
	End If
	If selectedRowID = -1 Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isSource Then
		line.Put("source",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${SourceColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("target",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${TargetColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
	UpdateSubtitleLabel
End Sub

Private Sub SourceTextArea_TextChanged (Old As String, New As String)
	UpdateText(True,New)
End Sub

Sub addKeyEvent(textarea1 As TextArea,eventName As String)
	Dim CJO As JavaObject = textarea1
	Dim O As Object = CJO.CreateEventFromUI("javafx.event.EventHandler",eventName&"_KeyPressed",Null)
	CJO.RunMethod("setOnKeyPressed",Array(O))
	CJO.RunMethod("setFocusTraversable",Array(True))
End Sub

private Sub sourceTextArea_KeyPressed_Event (MethodName As String, Args() As Object)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	If selectedRowID = -1 Then
		Return
	End If
	If SplitModeToggleButton.Selected Then
		Dim KEvt As JavaObject = Args(0)
		Dim result As String
		result=KEvt.RunMethod("getCode",Null)
		Log(result)
		If result="ENTER" Then
			splitSegment
		Else if result="DELETE" Then
			mergeSegment
		End If
	End If
End Sub


private Sub splitSegment
	Dim newRowIDToSelect As Int = selectedRowID + 1
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
    Dim ta As TextArea = SourceTextArea
	Dim source As String = ta.Text
	Dim newLines As List
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
	Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
	Dim currentTimeMs As Long = GetCurrentVideoTime
	If SplitAtPlaybackPositionToggleButton.Selected And startTimeMs<currentTimeMs And currentTimeMs<endTimeMs Then
		newLines.Initialize
		Dim firstLine As Map
		firstLine.Initialize
		firstLine.Put("startTime",line.Get("startTime"))
		firstLine.Put("endTime",Utils.GetTimeStringFromMilliseconds(currentTimeMs))
		firstLine.Put("source",Regex.Split(CRLF,source)(0))
		firstLine.Put("target",line.Get("target"))
		Dim secondLine As Map
		secondLine.Initialize
		secondLine.Put("startTime",firstLine.Get("endTime"))
		secondLine.Put("endTime",line.Get("endTime"))
		secondLine.Put("source",Regex.Split(CRLF,source)(1))
		secondLine.Put("target","")
		newLines.Add(firstLine)
		newLines.Add(secondLine)
	Else
		Dim splitter As SentenceSplitter
		splitter.Initialize(currentProject.SourceLang)
		newLines = splitter.GetNewLines(line.Get("startTime"),line.Get("endTime"),currentProject.SourceLang,source,line.Get("target"),True)
	End If
	currentProject.DeleteLine(selectedRowID - 1)
	InsertLines(selectedRowID - 1,newLines)
	SelectRow(newRowIDToSelect,True)
End Sub

Private Sub mergeSegment
	MergeWithTheNextLine
End Sub


Private Sub TargetTextArea_TextChanged (Old As String, New As String)
	UpdateText(False,New)
End Sub

Private Sub StartTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(True,New)
End Sub

Private Sub EndTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(False,New)
End Sub

Private Sub UseCurrentTimeButton_MouseClicked (EventData As MouseEvent)
	If focusedTimeTextField.IsInitialized Then
		focusedTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub StartTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = StartTimeTextField
	End If
End Sub

Private Sub EndTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = EndTimeTextField
	End If
End Sub

Private Sub EnableWaveFormCheckBox_CheckedChange(Checked As Boolean)
	If Checked Then
		If limitedMode And vlc.GetLength > 2 * 60 * 1000 Then
			fx.Msgbox(MainForm,loc.Localize("Limited mode can only display waveform for a media file shorter than 2 minutes."),"")
			EnableWaveFormCheckBox.Checked = False
			Return
		End If
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ConvertToWav(parent,filename,tmpDir)) Complete (done As Object)
		If ReadyToDrawWaveForm Then
			wait for (DrawWaveForm) complete (done As Object)
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

private Sub DetectVoiceActivity
	If currentProject.IsInitialized=False Then
		Return
	End If
	If limitedMode And vlc.GetLength > 5 * 60 * 1000 Then
		fx.Msgbox(MainForm,loc.Localize("Limited mode can only recognize a media file shorter than 5 minutes."),"")
		Return
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	Dim vad As SileroVad
	vad.Initialize
	progressDialog.Show(loc.Localize("Detecting..."))
	Dim length As Long = vlc.GetLength
	Dim segLength As Int = 30
	Dim segments As Int = length/1000/segLength
	For i = 0 To segments
		progressDialog.update(i,segments)
		If progressDialog.isShowing = False Then
			Exit
		End If
		Dim timeOffset As Int = i * segLength
		Dim cutStartTimeStr As String = Utils.GetTimeStringFromMilliseconds(i * segLength * 1000)
		Dim cutEndTimeStr As String = Utils.GetTimeStringFromMilliseconds(Min(i * segLength * 1000 + segLength * 1000,length))
		Dim path As String = File.Combine(tmpDir,"cut.wav")
		wait for (FFMpeg.CutWav(tmpDir,"audio.wav","cut.wav",cutStartTimeStr,cutEndTimeStr)) complete (done As Object)
		wait for (vad.DetectAsync(path)) Complete (result As List)
		Log(result)
		For Each segment As Map In result
			Dim startMS As Long = (segment.Get("startTime")+timeOffset)*1000
			Dim endMS As Long = (segment.Get("endTime")+timeOffset)*1000
			Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startMS)
			Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endMS)
			currentProject.AddLine(startTime,endTime,"","")
		Next
	Next
	LoadLinesToTable
	progressDialog.close
	fx.Msgbox(MainForm,loc.Localize("Done"),"")
End Sub

Private Sub SetStartPointButton_MouseClicked (EventData As MouseEvent)
	If selectedRowID <> -1 Then
		StartTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub SetEndPointButton_MouseClicked (EventData As MouseEvent)
	If selectedRowID <> -1 Then
		EndTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub BackwardButton_MouseClicked (EventData As MouseEvent)
	Backward
End Sub

Private Sub ForwardButton_MouseClicked (EventData As MouseEvent)
	Forward
End Sub

Private Sub Backward
	Dim span As Int = Utils.getPref("jump_time_span",500)
	playbackStartTime = playbackStartTime - span
	Dim time As Double = Max(0, GetCurrentVideoTime - span)
	vlc.SetTime(time)
	player.Position = time
End Sub

Private Sub Forward
	Dim span As Int = Utils.getPref("jump_time_span",500)
	playbackStartTime = playbackStartTime + span
	Dim time As Double = Min(GetCurrentVideoTime + span,vlc.GetLength)
	vlc.SetTime(time)
	player.Position = time
End Sub

Public Sub cleanupHook
	If hook.IsInitialized Then
		hook.cleanup
	End If
End Sub

Private Sub Hook_NativeKeyPressed(code As String)
	If code = 57 Then 'space pressed
		If VLCPane.Tag = True Then
			TogglePlaying
		End If
	End If
End Sub

Private Sub VideoPlayerPane_MouseEntered (EventData As MouseEvent)
	VLCPane.Tag = True
	PlayButton.RequestFocus
End Sub

Private Sub VideoPlayerPane_MouseExited (EventData As MouseEvent)
	VLCPane.Tag = False
End Sub

Private Sub WaveFormPane_MouseEntered (EventData As MouseEvent)
	PlayButton.RequestFocus
	VLCPane.Tag = True
End Sub

Private Sub WaveFormPane_MouseExited (EventData As MouseEvent)
	VLCPane.Tag = False
End Sub

Private Sub NewLineHereButton_MouseClicked (EventData As MouseEvent)
	Dim currentStartTime As Long = GetCurrentVideoTime
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(currentStartTime)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(currentStartTime + 1000)
	If selectedRowID <> -1 And selectedRowID <> currentProject.lines.Size Then
		currentProject.AppendLineWithTime(selectedRowID - 1,startTime,endTime)
		LoadLinesToTable
		JumpToRow(selectedRowID+1,0)
	Else
		currentProject.AddLine(startTime,endTime,"","")
		LoadLinesToTable
		JumpToRow(currentProject.lines.Size,200)
	End If
End Sub

Private Sub DisplaySubtitleCheckBox_CheckedChange(Checked As Boolean)
	Dim jo As JavaObject = SubtitleLabel
	jo.RunMethod("setTextAlignment", Array("CENTER"))
	SubtitleLabel.Visible = Checked
	ApplySubtitleLabelStyle
End Sub

private Sub ApplySubtitleLabelStyle
	SetSubtitleLabelFontSize
	SubtitleLabel.Style = Utils.getPref("subtitle_css",$"-fx-effect: dropshadow( three-pass-box , rgba(0,0,0,1.0) , 1, 1 , 0 , 0 );"$)
End Sub

private Sub SetSubtitleLabelFontSize
	Dim videoHeight As Int = VLCImageView.GetImage.Height
	Dim fontSize As Double = Utils.getPref("subtitle_font_size",16)
	fontSize = videoHeight / 720 * (40 / 16) * fontSize 'scale fontsize based on video height
	Dim labelWidth As Double = SubtitleLabel.PrefWidth + 20
	Dim scaledSize As Double = labelWidth / VLCImageView.GetImage.Width * fontSize
	SubtitleLabel.Font = fx.DefaultFont(scaledSize)
End Sub

private Sub AddKeyEventListener(n As Node)
	Dim r As Reflector
	r.Target = n
	r.AddEventHandler("keypressed", "javafx.scene.input.KeyEvent.KEY_PRESSED")
	r.AddEventHandler("keyreleased", "javafx.scene.input.KeyEvent.KEY_RELEASED")
End Sub

private Sub KeyPressed_Event (e As Event)

End Sub

private Sub KeyReleased_Event (e As Event)
	Dim jo As JavaObject = e
	Dim keycode As String = jo.RunMethod("getCode", Null)
	If keycode = "DELETE" Then
		If selectedRowID <> -1 Then
			DeleteThisLine
		End If
	End If
End Sub

public Sub FillText(text As String,isTarget As Boolean)
	If isTarget Then
		TargetTextArea.Text = text
	Else
		SourceTextArea.Text = text
	End If
End Sub

Private Sub QuickTranslateButton_MouseClicked (EventData As MouseEvent)
	Dim preferencesMap As Map=Utils.getPrefMap
	If preferencesMap.ContainsKey("mt") Then
		Dim mtPreferences As Map=preferencesMap.Get("mt")
		For Each engine As String In MT.getMTList
			If mtPreferences.GetDefault(engine&"_enabled",False)=True Then
				translateCurrentText(engine)
				Return
			End If
		Next
	End If
End Sub

Sub translateCurrentText(engine As String) As ResumableSub
	If selectedRowID <> -1 Then
		wait for (MT.getMT(SourceTextArea.Text,currentProject.sourceLang,currentProject.targetLang,engine)) Complete (translation As String)
		If translation<>"" Then
			Log(translation)
			TargetTextArea.Text=translation
		End If
	End If
	Return ""
End Sub

Private Sub SplitModeToggleButton_SelectedChange(Selected As Boolean)
	SplitAtPlaybackPositionToggleButton.Visible = Selected
End Sub

Private Sub VLCPane_MouseClicked (EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then
		Dim view As B4XView = Sender
        If playerContextMenu.IsInitialized = False Then
			playerContextMenu.Initialize("")
			Dim playControlMi As MenuItem
			playControlMi.Initialize(loc.Localize("Play control"),"playControlMi")
			playerContextMenu.MenuItems.Add(playControlMi)
        End If
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = playerContextMenu
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	Else
		Dim jo As JavaObject = playerContextMenu
		jo.RunMethod("hide",Null)
	End If
End Sub

Private Sub playControlMi_Action
	If PlayControl.IsInitialized = False Then
		PlayControl.Initialize(vlc)
	End If
	PlayControl.Show
End Sub

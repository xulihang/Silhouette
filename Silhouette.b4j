AppType=JavaFX
Build1=Default,org.xulihang.silhouette
File1=apiparamfiller.bjl
File10=generalSettings.bjl
File11=icon.png
File12=inputbox.bjl
File13=JumpOptions.bjl
File14=LangaugePairSelector.bjl
File15=langcodes.txt
File16=LeftSplitPane.bjl
File17=LineEditor.bjl
File18=ListView.bjl
File19=main.bjl
File2=APISetting.bjl
File20=modelPreference.bjl
File21=MTSetting.bjl
File22=PlayControl.bjl
File23=pretranslate.bjl
File24=progress.bjl
File25=projectSetting.bjl
File26=searchandreplace.bjl
File27=silhouette.png
File28=TopRightSplitPane.bjl
File29=TopSplitPane.bjl
File3=ASROptions.bjl
File30=TranslationAssist.bjl
File31=TranslationMemory.bjl
File32=validator.bjl
File33=VideoPlayer.bjl
File34=WaveForm.bjl
File4=BottomSplitPane.bjl
File5=Editor.bjl
File6=EmailReset.bjl
File7=ErrorReporter.bjl
File8=ExportOptions.bjl
File9=generalPreference.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=Default Group
FileGroup29=Default Group
FileGroup3=Default Group
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=abplugin
Library10=jpoi
Library11=jrandomaccessfile
Library12=jreflection
Library13=jshell
Library14=json
Library15=jxui
Library16=okhttp
Library17=threading
Library18=xcustomlistview
Library19=xlutils
Library2=b4xcollections
Library20=xui views
Library21=jb4xencryption
Library3=b4xtable
Library4=byteconverter
Library5=encryption
Library6=javaobject
Library7=jcore
Library8=jfx
Library9=jokhttputils2
Module1=APIParamsFiller
Module10=InputBox
Module11=JumpOptions
Module12=jVLC
Module13=LanguagePairSelector
Module14=LocalizationHelper
Module15=Localizator
Module16=MT
Module17=NativeHook
Module18=PlayControlForm
Module19=Preferences
Module2=ASR
Module20=preTranslateDialog
Module21=progressDialog
Module22=Project
Module23=ProjectSettings
Module24=SearchAndReplaceDialog
Module25=SileroVad
Module26=SrtParser
Module27=TextFlow
Module28=UndoManager
Module29=Utils
Module3=ASROptions
Module30=|relative|..\Validator\Validator
Module31=WaveFormBitmapCreator
Module32=WavRandomAccessFile
Module4=DraggableRange
Module5=|relative|..\Validator\EmailReset
Module6=ErrorReporter
Module7=Exporter
Module8=ExportOptions
Module9=FFMpeg
NumberOfFiles=34
NumberOfLibraries=21
NumberOfModules=32
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
	#VirtualMachineArgs: --add-opens javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
#End Region

#AdditionalJar: jna-5.16.0
#AdditionalJar: slf4j-api-1.7.10
#AdditionalJar: jna-platform-5.16.0
#AdditionalJar: vlcj-4.8.3
#AdditionalJar: vlcj-javafx-1.2.0
#AdditionalJar: vlcj-natives-4.8.3
#AdditionalJar: sqlite-jdbc-3.43.0.0
#AdditionalJar: bcprov-jdk15on-154
#AdditionalJar: silero-vad
#AdditionalJar: onnxruntime-1.20.0
#AdditionalJar: jnativehook-2.2.2

Sub Process_Globals
	Public prefPath As String
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private vlc As jVLC
	Private MenuBar1 As MenuBar
	Private MainPane As Pane
	Private EditorSplitPane As SplitPane
	Private VLCPane As Pane
	Private PlayButton As Button
	Private ProgressSlider As Slider
	Private VolSlider As Slider
	Private ProgressLabel As Label
	Private TotalTimeLabel As Label
	Private ProgressTimer As Timer
	Private ProgressContextMenu As ContextMenu
	Private WaveFormContextMenu As ContextMenu
	Private RightClickTarget As Node
	Private BottomSplitPane As SplitPane
	Private TopSplitPane As SplitPane
	Private TopRightSplitPane As SplitPane
	Private SourceTextArea As TextArea
	Private TargetTextArea As TextArea
	Private LinesTable As B4XTable
	Private currentProject As Project
	Private tableCM As ContextMenu
	Private robot As JavaObject
	Private selectedRowID As Int = -1
	Private expectedEndTime As Int = -1
	Private segmentLength As Int = 30
	Private EndTimeTextField As TextField
	Private StartTimeTextField As TextField
	Private StartColumn As B4XTableColumn
	Private EndColumn As B4XTableColumn
	Private SourceColumn As B4XTableColumn
	Private TargetColumn As B4XTableColumn
	Private focusedTimeTextField As TextField
	Private AssistTabPane As TabPane
	Private TMTableView As TableView
	Private TMTextArea As TextArea
	Public plugin As ABPlugin
	Private isLongClick As Boolean = False
	Private VLCImageView As ImageView
	Private OverviewWaveFormImageView As ImageView
	Private WaveFormImageView As ImageView
	Private waveFormCreator As WaveFormBitmapCreator
	Private overviewRange As DraggableRange
	Private cutDurationMs As Long
	Private cutStartTimeMs As Long
	Private timestampRange As DraggableRange
	Private AudioProgressLabel As Label
	Private EnableWaveFormCheckBox As CheckBox
	Private PlayControl As PlayControlForm
	Private playbackStartDate As Long = -1
	Private playbackStartTime As Long = -1
	Private SetEndPointButton As Button
	Private FollowProgressCheckBox As CheckBox
	Private KeepRatioCheckBox As CheckBox
	Private hook As NativeHook
	Public loc As Localizator
	Type SortCriteria (o As Object,value As Long)
	Private SubtitleLabel As Label
	Private DisplaySubtitleCheckBox As CheckBox
	Public version As String = "v1.0.0"
	Public limitedMode As Boolean = False
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	prefPath = File.Combine(File.DirData("Silhouette"),"preferences.conf")
	initLoc
	hook.Initialize(Me,"Hook")
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main")
	MainForm.WindowWidth = 800
	MainForm.Show
	MainPane.LoadLayout("Editor")
	EditorSplitPane.LoadLayout("TopSplitPane")
	EditorSplitPane.LoadLayout("BottomSplitPane")
	EditorSplitPane.Vertical = True
	TopSplitPane.LoadLayout("VideoPlayer")
	TopSplitPane.LoadLayout("TopRightSplitPane")
	TopSplitPane.DividerPositions = Array As Double(0.8,0.2)
	TopRightSplitPane.LoadLayout("WaveForm")
	TopRightSplitPane.LoadLayout("LineEditor")
	TopRightSplitPane.Vertical = True
	BottomSplitPane.LoadLayout("ListView")
	BottomSplitPane.LoadLayout("TranslationAssist")
	AssistTabPane.LoadLayout("TranslationMemory",loc.Localize("Translation"))
	TMTableView.SetColumnWidth(0,50)
	TMTableView.SetColumnWidth(1,50)
	TMTableView.SetColumnWidth(2,200)
	TMTableView.SetColumnWidth(3,100)
	vlc.Initialize(VLCImageView)
	VLCImageView.PreserveRatio = True
	
	ProgressTimer.Initialize("ProgressTimer",100)
	ProgressTimer.Enabled = False
	tableCM.Initialize("tableCM")
	For Each text As String In Array(loc.Localize("Play this line"), _ 
                                     loc.Localize("Play from this line"), _ 
		                             loc.Localize("Delete this line"), _ 
									 loc.Localize("Prepend a line"), _ 
									 loc.Localize("Append a line"), _ 
									 loc.Localize("Merge with the next line"), _ 
									 loc.Localize("Recognize this line"))
		Dim mi As MenuItem
		mi.Initialize(text,"tableMenuItem")
		tableCM.MenuItems.Add(mi)
	Next
	robot = robot.InitializeStatic("com.sun.glass.ui.Application").RunMethodJO("GetApplication",Null).RunMethodJO("createRobot",Null)
	Dim jo As JavaObject = ProgressSlider
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mousemoved", Null)
	jo.RunMethod("setOnMouseMoved", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseclicked", Null)
	jo.RunMethod("setOnMouseClicked", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseexited", Null)
	jo.RunMethod("setOnMouseExited", Array(e))
	ProgressSlider.tag = False
	ProgressContextMenu.Initialize("ProgressContextMenu")
	WaveFormContextMenu.Initialize("WaveFormContextMenu")
	SetTable
	loadPlugins
	AddWaveFormControls
	SubtitleLabel.Visible = False
	LocalizeMainFrom
	Dim v As Validator
	v.Initialize
	If v.VerifyInSilence = False Then
		v.showAndWait
	End If
End Sub

Public Sub initLoc
	loc.Initialize(File.DirApp,"strings.db")
	Dim preferencesMap As Map = Utils.getPrefMap
	If preferencesMap.ContainsKey("lang") Then
		loc.ForceLocale(preferencesMap.Get("lang"))
	End If
End Sub

Public Sub LocalizeMainFrom
	loc.LocalizeForm(MainForm)
End Sub

Private Sub AddWaveFormControls
	Dim overviewPane As Pane = overviewRange.Initialize(Me,"overviewRange")
	Dim timestampRangePane As Pane = timestampRange.Initialize(Me,"timestampRange")
	Dim parent As Pane = OverviewWaveFormImageView.Parent
	parent.AddNode(overviewPane,OverviewWaveFormImageView.Left,OverviewWaveFormImageView.Top,OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height)
	parent.AddNode(timestampRangePane,WaveFormImageView.Left,WaveFormImageView.top,WaveFormImageView.width,WaveFormImageView.Height)
End Sub


'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	If StackTrace.Contains("Unable to load library 'libvlc'") Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("Please install VLC v3 first and then restart the program."),"",loc.Localize("Download"),loc.Localize("Okay"),"",fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			fx.ShowExternalDocument("https://www.videolan.org/vlc/")
		End If
	Else
		Dim reporter As ErrorReporter
		reporter.Initialize
		reporter.ShowAndWait("error: "&Error.Message&CRLF&"StackTrace: "&StackTrace)
	End If
	Return False
End Sub


Public Sub loadPlugins
	Dim dir As String
	dir=File.Combine(File.DirApp,"plugins")
	plugin.Initialize("plugin",dir, "MyKey")
	plugin.Start(1)
	Log(plugin.GetAvailablePlugins)
End Sub

Sub plugin_PluginsChanged()
	Log("plugins have changed!")
	Log(plugin.GetAvailablePlugins)
	plugin.Stop
End Sub

private Sub SetTable
	LinesTable.HeaderFont = xui.CreateFont(fx.DefaultFont(15),15)
	LinesTable.HeadersHeight = 30dip
	LinesTable.RowHeight = 30dip
	Dim NumberColumn As B4XTableColumn = LinesTable.AddColumn("No.", LinesTable.COLUMN_TYPE_TEXT)
	NumberColumn.Width = 80dip
	NumberColumn.Sortable = False
	StartColumn = LinesTable.AddColumn("Start", LinesTable.COLUMN_TYPE_TEXT)
	StartColumn.Width = 105dip
	StartColumn.Sortable = False
	EndColumn = LinesTable.AddColumn("End", LinesTable.COLUMN_TYPE_TEXT)
	EndColumn.Width = 105dip
	EndColumn.Sortable = False
	SourceColumn = LinesTable.AddColumn("Source", LinesTable.COLUMN_TYPE_TEXT)
	SourceColumn.Sortable = False
	TargetColumn = LinesTable.AddColumn("Target", LinesTable.COLUMN_TYPE_TEXT)
	TargetColumn.Sortable = False
	LinesTable.SearchVisible = False
	LinesTable.SelectionColor = xui.Color_Transparent
End Sub

Private Sub GetTimeLabelText(totalSeconds As Long) As String
	Dim minutes As Int =  Floor(totalSeconds / 60)
	Dim seconds As Int = totalSeconds - minutes*60
	Return NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Private Sub MenuBar1_Action
	Dim mi As MenuItem = Sender
	Select loc.FindSource(mi.Text)
		Case "_Open Media File"
			OpenFile
		Case "_Save"
			Save
		Case "_Close"
			Close
		Case "_Preferences"
			ShowPreferences
		Case "_Recognize Speech"
			RecognizeSpeech
		Case "_Detect Voice Activity"
			DetectVoiceActivity
		Case "_Pretranslate"
			Dim dialog As preTranslateDialog
			dialog.Initialize
			Dim options As Map = dialog.ShowAndWait
			pretranslate(options)
		Case "_New Line"
			NewLine
		Case "_Clear Lines"
			ClearLines
		Case "Sor_t Lines"
			SortLines
		Case "_Search and Replace"
			Dim snr As SearchAndReplaceDialog
			snr.Initialize(currentProject.lines)
			snr.show
		Case "_Undo"
			currentProject.Undo
			LoadLinesToTable
		Case "R_edo"
			currentProject.redo
			LoadLinesToTable
		Case "_Jump to Line"
			JumpToLine
		Case "Jump to the Line of the Current _Time"
			JumpToLineOfCurrentTime
		Case "Jump to the _Next Line"
			If selectedRowID <> -1 Then
				JumpToRow(selectedRowID + 1,0)
			End If
		Case "Jump to the _Previous Line"
			If selectedRowID <> -1 Then
				JumpToRow(selectedRowID - 1,0)
			End If
		Case "Jump _Forward"
			Forward(500)
		Case "Jump _Backward"
			Backward(500)
		Case "Pause/Resume"
			TogglePlaying
		Case "Play the _Previous Line"
			If selectedRowID <> -1 Then
				PlayLineByID(selectedRowID - 1)
			End If
		Case "Play the _Next Line"
			If selectedRowID <> -1 Then
				PlayLineByID(selectedRowID + 1)
			End If
		Case "_Settings"
			Dim ps As ProjectSettings
			ps.Initialize(currentProject)
			ps.show
		Case "import from _srt"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				ImportFromSRT(path)
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "import from tab-delimited _txt"
			If limitedMode Then
				fx.Msgbox(MainForm,loc.Localize("Limited mode cannot import files"),"")
				Return
			End If
			Dim fc As FileChooser
			fc.Initialize
			Dim path As String = fc.ShowOpen(MainForm)
			If File.Exists(path,"") Then
				ImportFromTXT(path)
				LoadLinesToTable
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to _srt"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("SRT",Array As String("*.srt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Exporter.ExportToSRT(currentProject.lines,path,True)
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "export to tab-delimited _txt"
			Dim fc As FileChooser
			fc.Initialize
			fc.SetExtensionFilter("TXT",Array As String("*.txt"))
			Dim path As String = fc.ShowSave(MainForm)
			If path <> "" Then
				Exporter.ExportToTXT(currentProject.lines,path)
				fx.Msgbox(MainForm,loc.Localize("Done"),"")
			End If
		Case "_Exit"
			ExitApp
		Case "Export UI strings"
			LocalizationHelper.Export
		Case "_About"
			fx.Msgbox(MainForm,"@xulihang, 2025","Silhouette "&version)
	End Select
End Sub

Private Sub ShowPreferences As Preferences
	Dim pref As Preferences
	pref.Initialize(MenuBar1)
	pref.Show
	Return pref
End Sub

Private Sub JumpToLineOfCurrentTime
	JumpToRow(FindTheRowIDOfTime(GetCurrentVideoTime),200)
End Sub

Private Sub FindTheRowIDOfTime(timeMs As Long) As Int
	Dim rowID As Int = 1
	rowID = 1
	Dim NotInRange As Boolean = True
	For Each line As Map In currentProject.lines
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		Dim endTime As String = line.Get("endTime")
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(endTime)
		If startTimeMs < timeMs And endTimeMs > timeMs Then
			NotInRange = False
			Exit
		End If
		rowID = rowID + 1
	Next
	If NotInRange = True Then
		rowID = -1
	Else
		rowID = Min(currentProject.lines.Size,rowID)
	End If
	Return rowID
End Sub

Private Sub JumpToLine
	Dim optionsForm As JumpOptions
	optionsForm.Initialize
	Dim options As Map = optionsForm.ShowAndWait
	Dim index As Int = 1
	If options.ContainsKey("index") Then
		index= options.Get("index")
	else if options.ContainsKey("time") Then
		Dim time As String = options.Get("time")
		Dim timeMs As Long = Utils.GetMillisecondsFromTimeString(time)
		index = 1
		For Each line As Map In currentProject.lines
			Dim startTime As String = line.Get("startTime")
			Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
			If timeMs < startTimeMs Then
				Exit
			End If
			index = index + 1
		Next
		index = Min(currentProject.lines.Size,index)
	End If
	JumpToRow(index,200)
End Sub

Public Sub JumpToRow(rowID As Int,sleepTime As Int)
	If rowID = -1 Then
		Return
	End If
	ResetSelectStatusOfLineTable
	Dim pageIndex As Int = Ceil(rowID / LinesTable.RowsPerPage)
	LinesTable.CurrentPage = pageIndex
	If sleepTime > 0 Then
		Sleep(sleepTime)
	End If
	SelectRow(rowID,True)
End Sub

Private Sub ConvertToWav(parent As String,filename As String, tmpDir As String) As ResumableSub
	If File.Exists(tmpDir,"audio.wav") = False Then
		progressDialog.Show(loc.Localize("Converting to audio..."))
		progressDialog.update2(loc.Localize("Processing..."))
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
		progressDialog.close
	End If
	If File.Exists(tmpDir,"segment-00000.wav") = False Then
		progressDialog.Show(loc.Localize("Splitting audio..."))
		Log("split wav...")
		Wait For (FFMpeg.SplitWav(segmentLength,tmpDir,"audio.wav")) Complete (done As Object)
		Log("split wav done")
		progressDialog.close
	End If
	Return ""
End Sub

Private Sub RecognizeSpeech
	If currentProject.IsInitialized=False Then
		Return
	End If
	If limitedMode And vlc.GetLength > 5 * 60 * 1000 Then
		fx.Msgbox(MainForm,loc.Localize("Limited mode can only recognize a media file shorter than 5 minutes."),"")
		Return
	End If
	Dim optionsForm As ASROptions
	optionsForm.Initialize
	Dim options As Map = optionsForm.ShowAndWait
	Dim method As Int = options.GetDefault("split_method",-1)
	If method = -1 Then
		Return
	End If
	If method = 0 Then
		RecognizeSpeechByFixedSpan
	Else
		RecognizeExistingLines
	End If
End Sub

Private Sub RecognizeExistingLines
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchTab(2)
		End If
		Return
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	progressDialog.Show(loc.Localize("Recognizing audio..."))
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		progressDialog.update(index,currentProject.lines.Size)
		index = index + 1
		If progressDialog.isShowing = False Then
			Exit
		End If
		If line.Get("source") <> "" Then
			Continue
		End If
		Dim startTime As String = line.Get("startTime")
		Dim endTime As String = line.Get("endTime")
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ASR.RecognizeCut(tmpDir,"audio.wav",startTime,endTime,currentProject.SourceLang,engine)) complete (str As String)
		line.Put("source",str)
	Next
	LoadLinesToTable
	progressDialog.close
End Sub

Private Sub RecognizeSpeechByFixedSpan
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchTab(2)
		End If
		Return
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	
	Dim files As List = File.ListFiles(tmpDir)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	wavFiles = SortedWavFiles(wavFiles)
	progressDialog.Show(loc.Localize("Recognizing audio..."))
	Dim index As Int = 1
	For Each filename As String In wavFiles
		Log(index & "/" & wavFiles.Size)
		Dim purename As String = Utils.GetFilenameWithoutExtension(filename)
		'stored as "segment-00000.srt" or "segment-00000.wav.srt"
		If File.Exists(tmpDir,purename&".srt") = False And File.Exists(tmpDir,filename&".srt") = False Then
			progressDialog.update(index,wavFiles.Size)
			Dim wavpath As String = File.Combine(tmpDir,filename)
			
			Wait For (ASR.RecognizeWav(wavpath,currentProject.SourceLang,engine)) Complete (done As Object)
		End If
		If progressDialog.isShowing = False Then
			Exit
		End If
		index = index + 1
	Next
	progressDialog.close
	LoadSRTToProject
	LoadLinesToTable
End Sub

Private Sub LoadSRTToProject
	Dim parser As SrtParser
	parser.Initialize
	Dim dir As String = currentProject.GetTmpFolder
	Dim files As List = File.ListFiles(dir)
	currentProject.Clear
	Dim index As Int = 0
	Dim srtFiles As List
	srtFiles.Initialize
	For Each filename As String In files
		If filename.EndsWith(".srt") And filename.StartsWith("segment") Then
			srtFiles.Add(filename)
		End If
	Next
	If srtFiles.Size>0 Then
		srtFiles = SortedSRTFiles(srtFiles)
	End If
	For Each filename As String In srtFiles
		Dim offsetMS As Int = index * segmentLength * 1000
		Dim content As String = File.ReadString(dir,filename)
		content = Utils.RemoveBOM(content)
		Dim lines As List = parser.Parse(content)
		For Each line As SpeechLine In lines
			Dim startTime As String = Utils.ShiftTimeString(line.startTime,offsetMS)
			Dim endTime As String = Utils.ShiftTimeString(line.endTime,offsetMS)
			currentProject.AddLine(startTime,endTime,line.text,"")
		Next
		index = index + 1
	Next
End Sub

Private Sub SortedSRTFiles(srtFiles As List) As List
	Dim firstFilename As String = srtFiles.Get(0)
	Dim newFilesList As List
	newFilesList.Initialize
	For i = 0 To srtFiles.Size-1
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("segment-")
		sb.Append(NumberFormat(i,5,0).Replace(",",""))
		If firstFilename.Contains(".wav") Then
			sb.Append(".wav")
		End If
		sb.Append(".srt")
		newFilesList.Add(sb.ToString)
	Next
	Return newFilesList
End Sub

Private Sub SortedWavFiles(wavfiles As List) As List
	Dim newFilesList As List
	newFilesList.Initialize
	For i = 0 To wavfiles.Size-1
		Dim sb As StringBuilder
		sb.Initialize
		sb.Append("segment-")
		sb.Append(NumberFormat(i,5,0).Replace(",",""))
		sb.Append(".wav")
		newFilesList.Add(sb.ToString)
	Next
	Return newFilesList
End Sub


Private Sub ImportFromTXT(path As String)
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	For Each line As String In Regex.Split(CRLF,content)
		Log(line)
		Dim values() As String = Regex.Split("	",line)
		Log(values.Length)
		Dim startTime As String = values(0)
		Dim endTime As String = values(1)
		Dim source As String = Exporter.Unescape(values(2))
		Dim target As String = Exporter.Unescape(values(3))
		currentProject.AddLine(startTime,endTime,source,target)
	Next
End Sub

Private Sub ImportFromSRT(path As String)
	Dim parser As SrtParser
	parser.Initialize
	currentProject.Clear
	Dim content As String = File.ReadString(path,"")
	content = Utils.RemoveBOM(content)
	Dim lines As List = parser.Parse(content)
	For Each line As SpeechLine In lines
		Dim startTime As String = line.startTime
		Dim endTime As String = line.endTime
		currentProject.AddLine(startTime,endTime,line.text,"")
	Next
End Sub

public Sub LoadLinesToTable
	Dim data As List
	data.Initialize
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		index = index + 1
		Dim row(5) As String
		row(0) = index.As(String)
		row(1) = line.Get("startTime")
		row(2) = line.Get("endTime")
		row(3) = line.Get("source")
		row(4) = line.Get("target")
		data.Add(row)
	Next
	LinesTable.SetData(data)
End Sub

Sub LinesTable_CellClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,False)
End Sub

Sub LinesTable_CellLongClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,True)
	Dim col As B4XTableColumn = LinesTable.GetColumn(ColumnId)
	Dim i As Int = LinesTable.VisibleRowIds.IndexOf(RowId)
	Dim cell As B4XView = col.CellsLayouts.Get(i)
	Dim jo As JavaObject = tableCM '<--------------------------- global ContextMenu object
	Dim x As Double = robot.RunMethod("getMouseX",Null)' <----- global JavaObject object
	Dim y As Double = robot.RunMethod("getMouseY",Null)
	If Utils.DetectOS = "mac" Then
		Dim m As Map = Utils.GetScreenPosition(cell)
		x = m.Get("x") + cell.Width/2
		y = m.Get("y") + cell.Height/2
	End If
	jo.RunMethod("show", Array(cell, x, y))
End Sub

Private Sub ResetSelectStatusOfLineTable
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If i Mod 2 = 0 Then
				pnl.Color = LinesTable.EvenRowColor
			Else
				pnl.Color = LinesTable.OddRowColor
			End If
		Next
	Next
End Sub

Sub SelectRow(targetRowId As Int,fromLongClick As Boolean)    'rowid-1
	Dim color As Int = xui.Color_RGB(119,198,255)
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		Dim RowId As Long = LinesTable.VisibleRowIds.Get(i)
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If RowId = targetRowId Then
				pnl.Color=color
			Else
				If i Mod 2 = 0 Then
					pnl.Color = LinesTable.EvenRowColor
				Else
					pnl.Color = LinesTable.OddRowColor
				End If
			End If
		Next
	Next
	selectedRowID = targetRowId
	LoadLineToEditor(fromLongClick)
	UpdateSubtitleLabel
	If ReadyToDrawWaveForm Then
		DrawWaveForm
		SetTheRangeForTheSelectedRow
	End If
End Sub

private Sub UpdateSubtitleLabel
	If DisplaySubtitleCheckBox.Checked Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		SubtitleLabel.Text = line.Get("source")&CRLF&line.Get("target")
	End If
End Sub

Private Sub SetTheRangeForTheSelectedRow
	Dim padding As Int = 1000 '1 seconds padding
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim endTime As String = line.get("endTime")
	Dim endTimeMs As Long
	If KeepRatioCheckBox.Checked And overviewRange.time <> 0 Then
		endTimeMs = startTimeMs + overviewRange.time
	Else
		endTimeMs = Utils.GetMillisecondsFromTimeString(endTime)
	End If
	Dim paddedStartTimeMs As Long = Max(0,startTimeMs - padding)
	Dim paddedEndTimeMs As Long = Min(endTimeMs + padding, vlc.GetLength)
	
	'duration for timestamp
	Dim lineDuration As Int = paddedEndTimeMs - paddedStartTimeMs
	
	Dim cutStartTimePercent As Double = (paddedStartTimeMs - cutStartTimeMs) / cutDurationMs
	Dim cutEndTimePercent As Double = (paddedEndTimeMs - cutStartTimeMs) / cutDurationMs
	overviewRange.setProgress(cutStartTimePercent,cutEndTimePercent)
	overviewRange.TriggerRangeChanged
	
	Dim overViewStartTime As Long  = cutStartTimePercent * cutDurationMs
	Dim startProgress As Double = (paddedStartTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	Dim endProgress As Double = (paddedEndTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	timestampRange.setProgress(startProgress,endProgress)
	DisplaySiblingRanges(overViewStartTime,lineDuration)
End Sub

private Sub DisplaySiblingRanges(overViewStartTime As Long,lineDuration As Long)
	Dim previousStartProgress As Double = -1
	Dim previousEndProgress As Double = -1
	Dim nextStartProgress As Double = -1
	Dim nextEndProgress As Double = -1
	If selectedRowID - 2 >= 0 Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 2)
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		previousStartProgress = (startTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
		previousEndProgress  = (endTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	End If
	If selectedRowID <= currentProject.lines.Size - 1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID)
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		Dim endTimeMs As Long = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		nextStartProgress = (startTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
		nextEndProgress  = (endTimeMs - overViewStartTime - cutStartTimeMs) / lineDuration
	End If
	timestampRange.setPreviousAndNextProgress(previousStartProgress,previousEndProgress,nextStartProgress,nextEndProgress)
End Sub

Private Sub ReadyToDrawWaveForm As Boolean
	Return currentProject.IsInitialized And selectedRowID <> - 1 And EnableWaveFormCheckBox.Checked And vlc.Stopped = False
End Sub

Private Sub WaveFormPane_Resize (Width As Double, Height As Double)
	timestampRange.Pane.SetSize(Width,Height/4*3)
	overviewRange.Pane.Top = Height/4*3
	overviewRange.Pane.SetSize(Width,Height/4)
	If ReadyToDrawWaveForm Then
		DrawWaveForm
	End If
End Sub

Private Sub GetWaveFilesToDraw As List
	Dim waveFilesToDraw As List
	waveFilesToDraw.Initialize
	Dim files As List = File.ListFiles(currentProject.GetTmpFolder)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = line.get("startTime")
	Dim ms As Long = Utils.GetMillisecondsFromTimeString(startTime)
	Dim wavIndex As Int = ms/1000/30
	Dim hasPrevious As Boolean
	If wavFiles.Size>0 Then
		If wavIndex - 1 >=0 Then
			hasPrevious = True
			waveFilesToDraw.Add(wavFiles.Get(wavIndex - 1))
		End If
		If wavIndex < wavFiles.Size Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex))
		End If
		If wavIndex + 1 <= wavFiles.Size - 1 Then
			waveFilesToDraw.Add(wavFiles.Get(wavIndex + 1))
		End If
	End If
	If hasPrevious Then
		cutStartTimeMs = (wavIndex-1) * 30 * 1000
	Else
		cutStartTimeMs = wavIndex * 30 * 1000
	End If
	Return waveFilesToDraw
End Sub

Private Sub DrawWaveForm
	Log("DrawWaveForm")
	InitializeWaveFormCreatorIfNeeded
	waveFormCreator.StartIndex = 0
	waveFormCreator.EndIndex = waveFormCreator.SampleLength - 1
	OverviewWaveFormImageView.SetImage(waveFormCreator.Draw(OverviewWaveFormImageView.Width,OverviewWaveFormImageView.Height))
End Sub

Private Sub ClearWaveForm
	Dim waveFormCreator As WaveFormBitmapCreator
	OverviewWaveFormImageView.SetImage(Null)
	WaveFormImageView.SetImage(Null)
End Sub

Private Sub InitializeWaveFormCreatorIfNeeded
	Dim waveFiles As List = GetWaveFilesToDraw
	If waveFormCreator.IsInitialized Then
		Log("waveform creator initialized")
		Dim needReload As Boolean = False
		If waveFormCreator.Tag Is List Then
			Dim prevousList As List = waveFormCreator.Tag
			If prevousList.Get(0) <> waveFiles.Get(0) Then
				needReload = True
			End If
		End If
		If needReload Then
			Log("reinit waveform creator")
			waveFormCreator.Initialize(LoadDataFromWaveFiles(waveFiles))
			waveFormCreator.Tag = waveFiles
		End If
	Else
		waveFormCreator.Initialize(LoadDataFromWaveFiles(waveFiles))
		waveFormCreator.Tag = waveFiles
	End If
End Sub

Private Sub LoadDataFromWaveFiles(waveFiles As List) As Short()
	Dim totalDuration As Int = 0
	Dim bytesArray As List
	bytesArray.Initialize
	For Each filename As String In waveFiles
		Log(filename)
		Dim wavRaf As WavRandomAccessFile
		wavRaf.Initialize(currentProject.GetTmpFolder,filename)
		totalDuration = totalDuration + wavRaf.Duration_ms
		bytesArray.Add(wavRaf.DataBytes)
	Next
	Dim jointBytes() As Byte = Utils.JoinBytes(bytesArray)
	Dim jointShorts() As Short = Utils.getDataShortsFromBytes(jointBytes)
	cutDurationMs = totalDuration
	Return jointShorts
End Sub

Private Sub overviewRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		waveFormCreator.StartIndex = startProgress*waveFormCreator.SampleLength
		waveFormCreator.EndIndex = Min(endProgress*waveFormCreator.SampleLength, waveFormCreator.SampleLength - 1)
		WaveFormImageView.SetImage(waveFormCreator.Draw(WaveFormImageView.Width,WaveFormImageView.Height))
		Dim overViewStartTime As Long  = startProgress * cutDurationMs
		Dim overViewEndTime As Long = endProgress * cutDurationMs
		Dim clipTime As Long = overViewEndTime - overViewStartTime
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
		Dim endTime As Long = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
		Dim newStartProgress As Double = (startTime - overViewStartTime -cutStartTimeMs) / clipTime
		Dim newEndProgress As Double = (endTime - overViewStartTime -cutStartTimeMs) / clipTime
		timestampRange.setProgress(newStartProgress,newEndProgress)
		DisplaySiblingRanges(overViewStartTime, clipTime)
	End If
End Sub

Private Sub overviewRange_MouseDragged(startProgress As Double,endProgress As Double)
	Dim overViewStartTime As Long  = startProgress * cutDurationMs
	Dim overViewEndTime As Long = endProgress * cutDurationMs
	Dim clipTime As Long = overViewEndTime - overViewStartTime
	overviewRange.time = clipTime
End Sub

Private Sub timestampRange_MouseClicked (EventData As MouseEvent)
	If EventData.ClickCount = 2 Then
		newLineHereMI_Action
	End If
End Sub

Private Sub timestampRange_RangeChanged(startProgress As Double,endProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime -startTime
		Dim clipStartTime As Long = clipTime * startProgress + startTime + cutStartTimeMs
		Dim clipEndTime As Long = clipTime * endProgress + startTime + cutStartTimeMs
		StartTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipStartTime)
		EndTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(clipEndTime)
	End If
End Sub

Private Sub overviewRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim time As Long  = mouseMoveProgress * cutDurationMs + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(time)
	End If
End Sub

Private Sub timestampRange_MouseMoved(mouseMoveProgress As Double)
	If ReadyToDrawWaveForm Then
		Dim startTime As Long  = overviewRange.StartProgress * cutDurationMs
		Dim endTime As Long = overviewRange.EndProgress * cutDurationMs
		Dim clipTime As Long = endTime - startTime
		Dim clipMouseMoveTime As Long = clipTime * mouseMoveProgress + startTime + cutStartTimeMs
		AudioProgressLabel.Text = Utils.GetTimeStringFromMilliseconds(clipMouseMoveTime)
	End If
End Sub

Sub pretranslate(options As Map) As ResumableSub
	If options.Get("type")<>"" Then
		If options.Get("type")="MT" Then
			Dim sourceLang As String
			Dim targetLang As String
			Dim mtengine As String=options.Get("engine")
			sourceLang=currentProject.SourceLang
			targetLang=currentProject.TargetLang
			Dim interval As Int=options.GetDefault("interval",0)
			wait for (MT.supportBatchTranslation(mtengine)) Complete (BatchSupported As Boolean)
			progressDialog.Show(loc.Localize("translating..."))
			If BatchSupported Then
				Dim index As Int = 0
				Dim segmentationResult As Map = MT.readLinesInSegmentsForTranslation(currentProject.lines)
				Dim linesToTranslate As List = segmentationResult.Get("lines")
				Dim segments As List = segmentationResult.Get("segments")
				For Each sourceList As List In segments
					index = index + 1
					progressDialog.update(index,segments.Size)
					If progressDialog.isShowing = False Then
						Exit
					End If
					wait for (MT.batchTranslate(sourceList,sourceLang,targetLang,mtengine)) complete (targetList As List)
					Dim j As Int = 0
					For Each target As String In targetList
						Dim line As Map = linesToTranslate.Get(j)
						line.Put("target",target)
						j = j + 1
					Next
					For j = sourceList.Size - 1 To 0 Step -1 
						linesToTranslate.RemoveAt(j)
					Next
					Sleep(interval)
				Next
			Else
				Dim index As Int = 0
				For Each line As Map In currentProject.lines
					index = index + 1
					progressDialog.update(index,currentProject.lines.Size)
					If progressDialog.isShowing = False Then
						Exit
					End If
					Dim source As String = line.Get("source")
					Dim target As String = line.Get("target")
					If target = "" Then
						wait for (MT.getMT(source,sourceLang,targetLang,mtengine)) complete (target As String)
						line.Put("target",target)
						Sleep(interval)
					End If
				Next
			End If
			
			progressDialog.close
		Else
			fx.Msgbox(MainForm,loc.Localize("Not supported now"),"")
		End If
	End If
	LoadLinesToTable
	Return ""
End Sub

Private Sub Save
	If currentProject.IsInitialized Then
		currentProject.save
	End If
End Sub

Private Sub Close
	StopPlaying
	LinesTable.SetData(Array())
	selectedRowID = -1
	ResetSelectStatusOfLineTable
	ClearWaveForm
	Dim currentProject As Project
End Sub

Private Sub OpenFile
	Dim fc As FileChooser
	fc.Initialize
	Dim path As String = fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		If currentProject.IsInitialized Then
			Dim currentProject As Project
			selectedRowID = -1
			ResetSelectStatusOfLineTable
			ClearWaveForm
		End If
		Dim isNew As Boolean = currentProject.Initialize(path,Me,"currentProject")
		If isNew Then
			Dim langSelector As LanguagePairSelector
			langSelector.Initialize
			Dim langpairMap As Map = langSelector.ShowAndWait
			currentProject.SourceLang=langpairMap.Get("source")
			currentProject.TargetLang=langpairMap.Get("target")
		End If
		PlayFile(path)
		LoadLinesToTable
	End If
End Sub

Private Sub currentProject_Changed(changed As Boolean)
	If changed Then
		MainForm.Title = "Silhouette*"
	Else
		MainForm.Title = "Silhouette"
	End If
End Sub

Private Sub PlayFile(path As String)
	If vlc.IsPlaying Then
		vlc.Stop
	End If
	ProgressSlider.tag = False
	ProgressSlider.Value = 0
	vlc.Play(path)
	ProgressSlider.tag = True
	Do While vlc.IsPlaying == False
		Sleep(100)
	Loop
	TogglePlayingStatus(True,vlc.GetTime)
	Dim time As Long = vlc.GetLength / 1000
	Dim minutes As Int =  Floor(time / 60)
	Dim seconds As Int = time - minutes*60
	TotalTimeLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Sub Progress_MouseExited_Event (MethodName As String, Args() As Object) As Object
	ProgressContextMenu.MenuItems.Clear
	Return Null
End Sub

Sub Progress_MouseClicked_Event (MethodName As String, Args() As Object) As ResumableSub
	If vlc.IsPlayable = False Then
		Return Null
	End If
	If vlc.IsSeekable = False Then
		fx.Msgbox(MainForm,loc.Localize("Not seekable"),"")
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	ProgressSlider.Enabled = False
	ProgressSlider.Value = percent * 100
	vlc.SetPosition(percent)
	TogglePlayingStatus(True,-1)
	ProgressContextMenu.MenuItems.Clear
	e.Consume
	Sleep(0)
	ProgressSlider.Enabled = True
	Return Null
End Sub

Sub Progress_MouseMoved_Event (MethodName As String, Args() As Object) As Object
	If vlc.IsPlayable = False Then
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	Dim time As Long = percent * vlc.GetLength / 1000
	ProgressContextMenu.MenuItems.Clear
	Dim mi As MenuItem
	mi.Initialize(GetTimeLabelText(time),"")
	ProgressContextMenu.MenuItems.Add(mi)
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ProgressSlider)
	Dim jo As JavaObject = ProgressContextMenu
	jo.RunMethod("show", Array(ProgressSlider, map1.Get("x")+e.X, map1.Get("y")-40))
	Return Null
End Sub

Private Sub VLCPane_Resize (Width As Double, Height As Double)
	ResizeVLCImageView(Width,Height)
End Sub

Private Sub ResizeVLCImageView(Width As Double, Height As Double)
	Dim img As Image = VLCImageView.GetImage
	If img.IsInitialized Then
		Dim radio As Double = img.Width/img.Height
		VLCImageView.Height = Height
		VLCImageView.Width = Width
		If img.Width/img.Height < Width/Height Then '16:9 4:3
			Dim desiredWidth As Double = VLCImageView.Height * radio
			VLCImageView.Left = (Width - desiredWidth) / 2
		Else
			Dim desiredHeight As Double = VLCImageView.Width / radio
			VLCImageView.Top = (Height - desiredHeight) / 2
		End If
	End If
End Sub

Private Sub ExitApp
	'vlc.stop
	cleanupHook
	Try
		vlc.release
	Catch
		Log(LastException)
	End Try
	ExitApplication
End Sub

Private Sub VolSlider_ValueChange (Value As Double)
	Log(Value)
	vlc.SetVolume(Value)
End Sub

Private Sub StopButton_MouseClicked (EventData As MouseEvent)
	StopPlaying
End Sub

Private Sub StopPlaying
	vlc.Stop
	TogglePlayingStatus(False,-1)
End Sub

Private Sub PlayButton_MouseClicked (EventData As MouseEvent)
	TogglePlaying
End Sub

Private Sub TogglePlaying
	If vlc.IsPlaying Then
		vlc.Pause
		TogglePlayingStatus(False,-1)
	Else
		vlc.Resume
		Do While vlc.IsPlaying = False
			Sleep(100)
		Loop
		TogglePlayingStatus(True,vlc.GetTime)
	End If
End Sub

Private Sub TogglePlayingStatus(isPlaying As Boolean,startTime As Long)
	If isPlaying Then
		vlc.SetVolume(VolSlider.Value)
		VLCPane.PrefWidth  = VLCPane.Width + 1
		VLCPane.PrefWidth  = VLCPane.Width - 1
		PlayButton.Text = ""
		ProgressTimer.Enabled = True
		playbackStartDate = DateTime.Now
		If startTime = -1 Then
			playbackStartTime = vlc.GetTime
		Else
			playbackStartTime = startTime
		End If
	Else
		PlayButton.Text = ""
		ProgressTimer.Enabled = False
		expectedEndTime = -1
		playbackStartDate = -1
		playbackStartTime = -1
	End If
End Sub

Private Sub GetCurrentVideoTime As Long
	Dim currentVideoTime As Long 
	If playbackStartDate <> -1 Then
		currentVideoTime = playbackStartTime + (DateTime.Now - playbackStartDate)*vlc.Rate
	Else
		currentVideoTime = vlc.GetTime
	End If
	Return currentVideoTime
End Sub

Private Sub ProgressTimer_Tick
	If vlc.IsPlaying Then
		Dim currentVideoTime As Long = GetCurrentVideoTime
		'currentVideoTime = currentVideoTime + 100
		If currentVideoTime > expectedEndTime And expectedEndTime <> -1 And playbackStartDate <> -1 Then
			expectedEndTime = -1
			playbackStartTime = -1
			playbackStartDate = -1
			vlc.Pause
			TogglePlayingStatus(False,-1)
		End If
		If FollowProgressCheckBox.Checked Then
			Dim rowID As Int = FindTheRowIDOfTime(currentVideoTime)
			If rowID <> selectedRowID And rowID <> -1 Then
				selectedRowID = rowID
				JumpToRow(rowID,0)
			End If
			If rowID = -1 Then
				If DisplaySubtitleCheckBox.Checked Then
					SubtitleLabel.Text = ""
				End If
			End If
		End If
		ProgressSlider.Tag = False
		DrawPositionLineInWaveForm(currentVideoTime)
		Dim time As Long = vlc.GetTime / 1000
		Dim minutes As Int = Floor(time / 60)
		Dim seconds As Int = time - minutes*60
		ProgressLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
		ProgressSlider.Value = vlc.GetTime/vlc.GetLength * 100
		Sleep(0)
		ProgressSlider.Tag = True
	Else
		vlc.Stopped = True
		TogglePlayingStatus(False,-1)
	End If
End Sub

Private Sub DrawPositionLineInWaveForm(time As Long)
	If ReadyToDrawWaveForm Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		Dim startTime As String = line.Get("startTime")
		Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(startTime)
		If startTimeMs >= cutStartTimeMs And startTimeMs <= cutStartTimeMs + cutDurationMs Then
			overviewRange.PlayTimeProgress = (time - cutStartTimeMs) / cutDurationMs
			Dim clipStartTime As Long  = overviewRange.StartProgress * cutDurationMs
			Dim clipEndTime As Long = overviewRange.EndProgress * cutDurationMs
			Dim clipTime As Long = clipEndTime - clipStartTime
			timestampRange.PlayTimeProgress = (time - cutStartTimeMs - clipStartTime) / clipTime
			If timestampRange.StopProgress <> -1 Then
				If timestampRange.PlayTimeProgress > timestampRange.StopProgress Then
					vlc.Pause
					TogglePlayingStatus(False,-1)
				End If
			End If
		End If
	End If
End Sub

Private Sub WaveFormPane_MouseClicked (EventData As MouseEvent)
	Dim view As Node = Sender
	Dim jo As JavaObject = EventData
	If EventData.SecondaryButtonPressed And EnableWaveFormCheckBox.Checked Then
		RightClickTarget = jo.RunMethod("getTarget",Null)
		Dim isTimestampRange As Boolean = False
		If RightClickTarget Is ImageView Then
			Dim iv As ImageView = RightClickTarget
			isTimestampRange = (iv == timestampRange.ImageView)
		End If
		SetWaveFormContextMenuItems(isTimestampRange)
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = WaveFormContextMenu
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	End If
End Sub

Private Sub SetWaveFormContextMenuItems(isTimestampRange As Boolean)
	WaveFormContextMenu.MenuItems.Clear
	If isTimestampRange Then
		Dim playMi As MenuItem
		playMi.Initialize(loc.Localize("Play the selection"),"playSelectionMI")
		WaveFormContextMenu.MenuItems.Add(playMi)
		Dim playSelectionHereMi As MenuItem
		playSelectionHereMi.Initialize(loc.Localize("Play the selection from here"),"playSelectionHereMI")
		WaveFormContextMenu.MenuItems.Add(playSelectionHereMi)
	End If
	Dim playHereMi As MenuItem
	playHereMi.Initialize(loc.Localize("Play from here"),"playHereMI")
	WaveFormContextMenu.MenuItems.Add(playHereMi)
	If isTimestampRange Then
		Dim splitHereMI As MenuItem
		splitHereMI.Initialize(loc.Localize("Split here"),"splitHereMI")
		WaveFormContextMenu.MenuItems.Add(splitHereMI)
		Dim setStopPointMi As MenuItem
		setStopPointMi.Initialize(loc.Localize("Set stop point"),"setStopPointMI")
		WaveFormContextMenu.MenuItems.Add(setStopPointMi)
		Dim clearStopPointMi As MenuItem
		clearStopPointMi.Initialize(loc.Localize("Clear stop point"),"clearStopPointMI")
		WaveFormContextMenu.MenuItems.Add(clearStopPointMi)
		Dim newLineHereMI As MenuItem
		newLineHereMI.Initialize(loc.Localize("Create a new line here"),"newLineHereMI")
		WaveFormContextMenu.MenuItems.Add(newLineHereMI)
	End If
End Sub

private Sub splitHereMI_Action
	If selectedRowID <> -1 Then
		Dim line As Map = currentProject.GetLine(selectedRowID - 1)
		currentProject.AppendLineWithTime(selectedRowID - 1,AudioProgressLabel.Text,line.get("endTime"))
		line.Put("endTime",AudioProgressLabel.Text)
		LoadLinesToTable
		SelectRow(selectedRowID,True)
	End If
End Sub

Private Sub setStopPointMI_Action
    timestampRange.StopProgress = timestampRange.LastMouseOverProgress
End Sub

Private Sub clearStopPointMI_Action
	timestampRange.StopProgress = -1
End Sub

Private Sub playHereMI_Action
	Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	vlc.SetTime(time)
	If vlc.IsPlaying = False Then
		vlc.Resume
	End If
	TogglePlayingStatus(True,time)
End Sub

Private Sub newLineHereMI_Action
	Dim rowID As Int = selectedRowID
	If rowID <> -1 Then
		Dim time As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
		Dim currentStartTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
		Dim append As Boolean
		If time < currentStartTime Then
			append = False
		Else
			append = True
		End If
		Dim startTime As String = AudioProgressLabel.Text
		Dim endTime As String = Utils.GetTimeStringFromMilliseconds(time + 1000)
		If append Then
			currentProject.AppendLineWithTime(rowID - 1,startTime,endTime)
		Else
			currentProject.PrependLineWithTime(rowID - 1,startTime,endTime)
		End If
		LoadLinesToTable
		If append Then
			SelectRow(rowID+1,True)
		Else
			SelectRow(rowID,True)
		End If
	End If
End Sub

Private Sub playSelectionMI_Action
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(StartTimeTextField.Text)
	expectedEndTime = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True,startTime)
End Sub

Private Sub playSelectionHereMI_Action
	Dim startTime As Long = Utils.GetMillisecondsFromTimeString(AudioProgressLabel.Text)
	expectedEndTime = Utils.GetMillisecondsFromTimeString(EndTimeTextField.Text)
	vlc.Resume
	vlc.SetTime(startTime)
	TogglePlayingStatus(True,startTime)
End Sub


Sub MainForm_CloseRequest (EventData As Event)
	Log("We are closing the mainform")
	If currentProject.IsInitialized Then
		If currentProject.changed = True Then
			Dim result As Int
			result=fx.Msgbox2(MainForm,loc.Localize("Project changed. Save the project?"),"", _
			                           loc.Localize("Yes"), _ 
									   loc.Localize("Cancel"), _ 
									   loc.Localize("Exit without saving"),fx.MSGBOX_CONFIRMATION)
			Select result
				'yes -1, no -2, cancel -3
				Case fx.DialogResponse.POSITIVE
					currentProject.save
				Case fx.DialogResponse.CANCEL
					EventData.Consume
					Return
			End Select
		End If
	End If
	ExitApp
End Sub

Private Sub tableMenuItem_Action
	Dim mi As MenuItem = Sender
	Select loc.FindSource(mi.Text)
	    Case "Play this line"
			PlayTheSelectedLine
		Case "Play from this line"
			PlayFromTheSelectedLine
		Case "Prepend a line"
			PrependLine
			SelectRow(selectedRowID,True)
		Case "Append a line"
			AppendLine
			SelectRow(selectedRowID+1,True)
		Case "Delete this line"
			currentProject.DeleteLine(selectedRowID - 1)
			LoadLinesToTable
			SelectRow(selectedRowID,True)
		Case "Merge with the next line"
			MergeWithTheNextLine
			SelectRow(selectedRowID,True)
		Case "Recognize this line"
			RecognizeTheSelectedLine
	End Select
End Sub

Private Sub HasValidateModel As Boolean
	Dim path As String = ASR.GetModelPath
	Log(path)
	If File.Exists(path,"") Then
		Return True
	End If
	Return False
End Sub

Private Sub RecognizeTheSelectedLine
	Dim engine As String = currentProject.settings.GetDefault("engine","whisper")
	If HasValidateModel=False And engine = "whisper" Then
		Dim response As Int = fx.Msgbox2(MainForm,loc.Localize("No models found"),"", _ 
		                                          loc.Localize("Go to perferences"),"",loc.Localize("Close"),fx.MSGBOX_CONFIRMATION)
		If response = fx.DialogResponse.POSITIVE Then
			ShowPreferences.SwitchTab(2)
		End If
		Return
	End If
	progressDialog.Show(loc.Localize("Recognizing..."))
	progressDialog.update2(loc.Localize("Processing..."))
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As String = currentLine.Get("startTime")
	Dim endTime As String = currentLine.Get("endTime")
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	If File.Exists(tmpDir,"audio.wav") = False Then
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim outpath As String = File.Combine(tmpDir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
	End If

	wait for (ASR.RecognizeCut(tmpDir,"audio.wav",startTime,endTime,currentProject.SourceLang,engine)) complete (str As String)
	
	SourceTextArea.Text = str
	progressDialog.close
End Sub

Private Sub PrependLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Max(0,Utils.GetMillisecondsFromTimeString(currentLine.Get("startTime"))-1*1000)
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.PrependLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

private Sub NewLine
	If selectedRowID <> -1 Then
		AppendLine
	Else
		currentProject.AppendLine(-1)
		LoadLinesToTable
	End If
End Sub

Private Sub SortLines
	currentProject.Sort
	LoadLinesToTable
End Sub

Private Sub ClearLines
	currentProject.Clear
	LoadLinesToTable
End Sub

Private Sub MergeWithTheNextLine
	If selectedRowID <> -1 Then
		currentProject.MergeWithTheNextLine(selectedRowID - 1)
		LoadLinesToTable
	End If
End Sub

Private Sub AppendLine
	Dim currentLine As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTimeMs As Long = Utils.GetMillisecondsFromTimeString(currentLine.Get("endTime"))
	Dim endTimeMs As Long = startTimeMs + 1*1000
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startTimeMs)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endTimeMs)
	currentProject.AppendLineWithTime(selectedRowID - 1,startTime,endTime)
	LoadLinesToTable
End Sub

Private Sub PlayTheSelectedLine
	PlayLineByID(selectedRowID)
End Sub

Private Sub PlayFromTheSelectedLine
	PlayFromLineByID(selectedRowID)
End Sub

Private Sub PlayFromLineByID(rowID As Int)
	Try
		Dim line As Map = currentProject.GetLine(rowID - 1)
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		vlc.Resume
		vlc.SetTime(startTime)
		TogglePlayingStatus(True,startTime)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub PlayLineByID(rowID As Int)
	Try
		Dim line As Map = currentProject.GetLine(rowID - 1)
		Dim startTime As Long = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
		expectedEndTime = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
		vlc.Resume
		vlc.SetTime(startTime)
		TogglePlayingStatus(True,startTime)
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub LoadLineToEditor(fromLongClick As Boolean)
	isLongClick = fromLongClick
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	SourceTextArea.Text = line.Get("source")
	TargetTextArea.Text = line.Get("target")
	StartTimeTextField.Text = line.Get("startTime")
	EndTimeTextField.Text = line.Get("endTime")
	If fromLongClick = False Then
		clearTMandMT
		ShowMT(SourceTextArea.Text,True)
	End If
	Sleep(200)
	isLongClick = False
End Sub

Private Sub clearTMandMT
	TMTableView.Items.Clear
	TMTextArea.Text=""
End Sub

Private Sub ShowMT(sourceText As String,fromTextArea As Boolean)
	If SourceTextArea.Text = "" Then
		Return
	End If
	Dim preferencesMap As Map = Utils.getPrefMap
	If preferencesMap.ContainsKey("mt") Then
		Dim mtPreferences As Map=preferencesMap.Get("mt")
		For Each engine As String In MT.getMTList
			If mtPreferences.GetDefault(engine&"_enabled",False)=True Then
				appendSingleMTResult(sourceText,fromTextArea,engine)
			End If
		Next
	End If
End Sub

Private Sub appendSingleMTResult(sourceText As String,fromTextArea As Boolean,engine As String)
	wait for (MT.getMT(sourceText,currentProject.SourceLang,currentProject.TargetLang,engine)) Complete (target As String)
	If fromTextArea And sourceText <> SourceTextArea.Text Then
		Return
	End If
	Dim lbl As Label
	lbl.Initialize("lbl")
	lbl.Text=target
	lbl.TooltipText=target
	Dim row() As Object
	row=Array("","",lbl,engine)
	Log(target)
	TMTableView.Items.Add(row)
End Sub


Sub tmTableView_MouseClicked (EventData As MouseEvent)
	If TMTableView.SelectedRow=-1 Then
		Return
	End If
	If TMTableView.SelectedRowValues=Null Then
		Return
	End If
	Dim lbl As Label=TMTableView.SelectedRowValues(2)
	If EventData.ClickCount=2 Then
		TargetTextArea.Text=lbl.Text
	Else if EventData.ClickCount=1 Then
		TMTextArea.Text=lbl.Text
	End If
End Sub

Private Sub UpdateTime(isStartTime As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	
	If isLongClick Then
		Return
	End If
	
	If selectedRowID = -1 Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isStartTime Then
		line.Put("startTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${StartColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("endTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${EndColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
	currentProject.AddState
End Sub

Private Sub UpdateText(isSource As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	If isLongClick Then
		Return
	End If
	If selectedRowID = -1 Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isSource Then
		line.Put("source",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${SourceColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("target",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${TargetColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
End Sub

Private Sub SourceTextArea_TextChanged (Old As String, New As String)
	UpdateText(True,New)
End Sub

Private Sub TargetTextArea_TextChanged (Old As String, New As String)
	UpdateText(False,New)
End Sub

Private Sub StartTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(True,New)
End Sub

Private Sub EndTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(False,New)
End Sub

Private Sub UseCurrentTimeButton_MouseClicked (EventData As MouseEvent)
	If focusedTimeTextField.IsInitialized Then
		focusedTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub StartTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = StartTimeTextField
	End If
End Sub

Private Sub EndTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = EndTimeTextField
	End If
End Sub

Private Sub EnableWaveFormCheckBox_CheckedChange(Checked As Boolean)
	If Checked Then
		If limitedMode And vlc.GetLength > 2 * 60 * 1000 Then
			fx.Msgbox(MainForm,loc.Localize("Limited mode can only display waveform for a media file shorter than 2 minutes."),"")
			EnableWaveFormCheckBox.Checked = False
			Return
		End If
		Dim parent As String = currentProject.GetMediaFolder
		Dim filename As String = currentProject.GetMediaFilename
		Dim tmpDir As String = currentProject.GetTmpFolder
		wait for (ConvertToWav(parent,filename,tmpDir)) Complete (done As Object)
		If ReadyToDrawWaveForm Then
			DrawWaveForm
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub VLCImageView_MouseClicked (EventData As MouseEvent)
	If EventData.SecondaryButtonPressed Then
		Dim view As B4XView = Sender
		Dim cm As ContextMenu
		cm.Initialize("")
		Dim playControlMi As MenuItem
		playControlMi.Initialize(loc.Localize("Play control"),"playControlMi")
		cm.MenuItems.Add(playControlMi)
		Dim map1 As Map
		map1=Utils.GetScreenPosition(view)
		Dim jo As JavaObject = cm
		jo.RunMethod("show", Array(view, map1.Get("x")+EventData.X, map1.Get("y")+EventData.Y))
	End If
End Sub

Private Sub playControlMi_Action
	If PlayControl.IsInitialized = False Then
		PlayControl.Initialize(vlc)
	End If
	PlayControl.Show
End Sub

private Sub DetectVoiceActivity
	If currentProject.IsInitialized=False Then
		Return
	End If
	If limitedMode And vlc.GetLength > 5 * 60 * 1000 Then
		fx.Msgbox(MainForm,loc.Localize("Limited mode can only recognize a media file shorter than 5 minutes."),"")
		Return
	End If
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim tmpDir As String = currentProject.GetTmpFolder
	
	wait for (ConvertToWav(parent,filename,tmpDir)) complete (done As Object)
	Dim vad As SileroVad
	vad.Initialize
	progressDialog.Show(loc.Localize("Detecting..."))
	Dim length As Long = vlc.GetLength
	Dim segLength As Int = 30
	Dim segments As Int = length/1000/segLength
	For i = 0 To segments
		progressDialog.update(i,segments)
		If progressDialog.isShowing = False Then
			Exit
		End If
		Dim timeOffset As Int = i * segLength
		Dim cutStartTimeStr As String = Utils.GetTimeStringFromMilliseconds(i * segLength * 1000)
		Dim cutEndTimeStr As String = Utils.GetTimeStringFromMilliseconds(Min(i * segLength * 1000 + segLength * 1000,length))
		Dim path As String = File.Combine(tmpDir,"cut.wav")
		wait for (FFMpeg.CutWav(tmpDir,"audio.wav","cut.wav",cutStartTimeStr,cutEndTimeStr)) complete (done As Object)
		wait for (vad.DetectAsync(path)) Complete (result As List)
		Log(result)
		For Each segment As Map In result
			Dim startMS As Long = (segment.Get("startTime")+timeOffset)*1000
			Dim endMS As Long = (segment.Get("endTime")+timeOffset)*1000
			Dim startTime As String = Utils.GetTimeStringFromMilliseconds(startMS)
			Dim endTime As String = Utils.GetTimeStringFromMilliseconds(endMS)
			currentProject.AddLine(startTime,endTime,"","")
		Next
	Next
	LoadLinesToTable
	progressDialog.close
	fx.Msgbox(MainForm,loc.Localize("Done"),"")
End Sub

Private Sub SetStartPointButton_MouseClicked (EventData As MouseEvent)
	If selectedRowID <> -1 Then
		StartTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub SetEndPointButton_MouseClicked (EventData As MouseEvent)
	If selectedRowID <> -1 Then
		EndTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(GetCurrentVideoTime)
		Sleep(0)
		If ReadyToDrawWaveForm Then
			SetTheRangeForTheSelectedRow
		End If
	End If
End Sub

Private Sub Backward500Button_MouseClicked (EventData As MouseEvent)
	Backward(500)
End Sub

Private Sub Forward500Button_MouseClicked (EventData As MouseEvent)
	Forward(500)
End Sub

Private Sub Backward(span As Int)
	playbackStartTime = playbackStartTime - span
	vlc.SetTime(Max(0, GetCurrentVideoTime - span))
End Sub

Private Sub Forward(span As Int)
	playbackStartTime = playbackStartTime + span
	vlc.SetTime(Min(GetCurrentVideoTime + span,vlc.GetLength))
End Sub

Public Sub cleanupHook
	If hook.IsInitialized Then
		hook.cleanup
	End If
End Sub

Private Sub Hook_NativeKeyPressed(code As String)
	If code = 57 Then 'space pressed
		If VLCPane.Tag = True Then
			TogglePlaying
		End If
	End If
End Sub

Private Sub VideoPlayerPane_MouseEntered (EventData As MouseEvent)
	VLCPane.Tag = True
	PlayButton.RequestFocus
End Sub

Private Sub VideoPlayerPane_MouseExited (EventData As MouseEvent)
	VLCPane.Tag = False
End Sub

Private Sub WaveFormPane_MouseEntered (EventData As MouseEvent)
	PlayButton.RequestFocus
	VLCPane.Tag = True
End Sub

Private Sub WaveFormPane_MouseExited (EventData As MouseEvent)
	VLCPane.Tag = False
End Sub

Private Sub NewLineHereButton_MouseClicked (EventData As MouseEvent)
	Dim currentStartTime As Long = GetCurrentVideoTime
	Dim startTime As String = Utils.GetTimeStringFromMilliseconds(currentStartTime)
	Dim endTime As String = Utils.GetTimeStringFromMilliseconds(currentStartTime + 1000)
	currentProject.AddLine(startTime,endTime,"","")
	LoadLinesToTable
	JumpToRow(currentProject.lines.Size,0)
End Sub

Private Sub DisplaySubtitleCheckBox_CheckedChange(Checked As Boolean)
	SubtitleLabel.Visible = Checked
End Sub

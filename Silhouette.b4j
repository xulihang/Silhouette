AppType=JavaFX
Build1=Default,b4j.example
File1=BottomSplitPane.bjl
File10=VideoPlayer.bjl
File11=WaveForm.bjl
File2=Editor.bjl
File3=LeftSplitPane.bjl
File4=LineEditor.bjl
File5=ListView.bjl
File6=main.bjl
File7=TopRightSplitPane.bjl
File8=TopSplitPane.bjl
File9=TranslationAssist.bjl
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=b4jvlcj
Library10=json
Library2=b4xtable
Library3=javaobject
Library4=jcore
Library5=jfx
Library6=jreflection
Library7=jshell
Library8=jxui
Library9=xcustomlistview
Module1=ASR
Module2=FFMpeg
Module3=Project
Module4=SrtParser
Module5=Utils
NumberOfFiles=11
NumberOfLibraries=10
NumberOfModules=5
Version=10
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private xui As XUI 
	Private vlc As B4JVlcj
	Private MenuBar1 As MenuBar
	Private MainPane As Pane
	Private EditorSplitPane As SplitPane
	Private VLCPane As Pane
	Private PlayButton As Button
	Private ProgressSlider As Slider
	Private VolSlider As Slider
	Private ProgressLabel As Label
	Private TotalTimeLabel As Label
	Private ProgressTimer As Timer
	Private ProgressContextMenu As ContextMenu
	Private BottomSplitPane As SplitPane
	Private TopSplitPane As SplitPane
	Private TopRightSplitPane As SplitPane
	Private SourceTextArea As TextArea
	Private TargetTextArea As TextArea
	Private LinesTable As B4XTable
	Private currentProject As Project
	Private tableCM As ContextMenu
	Private robot As JavaObject
	Private selectedRowID As Int
	Private expectedEndTime As Int = -1
	Private segmentLength As Int = 30
	Private EndTimeTextField As TextField
	Private StartTimeTextField As TextField
	Private StartColumn As B4XTableColumn
	Private EndColumn As B4XTableColumn
	Private SourceColumn As B4XTableColumn
	Private TargetColumn As B4XTableColumn
	private focusedTimeTextField as TextField
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	'** IMPORTANT - checking if VLC is installed on the computer should be the first thing to execute in your code
	If vlc.IsVLCInstalled = False Then
		'Implement your own code to tell user that VLC must be installed.
		'Note: if VLC has been installed in a non-standard directory, VLC might not be found.
		fx.Msgbox(MainForm,"VLC must be installed on the computer to run this program.","")
		ExitApplication
	End If

	'** OK, VLC was found. We can proceed.
	vlc.Initialize("vlc")
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main")
	MainForm.WindowWidth = 800
	MainForm.Show
	MainPane.LoadLayout("Editor")
	EditorSplitPane.LoadLayout("TopSplitPane")
	EditorSplitPane.LoadLayout("BottomSplitPane")
	EditorSplitPane.Vertical = True
	TopSplitPane.LoadLayout("VideoPlayer")
	TopSplitPane.LoadLayout("TopRightSplitPane")
	TopSplitPane.DividerPositions = Array As Double(0.8,0.2)
	TopRightSplitPane.LoadLayout("WaveForm")
	TopRightSplitPane.LoadLayout("LineEditor")
	TopRightSplitPane.Vertical = True
	BottomSplitPane.LoadLayout("ListView")
	BottomSplitPane.LoadLayout("TranslationAssist")
	Dim jo As JavaObject = VLCPane
	jo.RunMethodJo("getChildren", Null).RunMethod("add", Array(vlc.player))
	ProgressTimer.Initialize("ProgressTimer",250)
	ProgressTimer.Enabled = False
	tableCM.Initialize("tableCM")
	For Each text As String In Array("Play this line","Delete this line","Prepend a line","Append a line")
		Dim mi As MenuItem
		mi.Initialize(text,"tableMenuItem")
		tableCM.MenuItems.Add(mi)
	Next
	robot = robot.InitializeStatic("com.sun.glass.ui.Application").RunMethodJO("GetApplication",Null).RunMethodJO("createRobot",Null)
	Dim jo As JavaObject = ProgressSlider
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mousemoved", Null)
	jo.RunMethod("setOnMouseMoved", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseclicked", Null)
	jo.RunMethod("setOnMouseClicked", Array(e))
	Dim e As Object = jo.CreateEventFromUI("javafx.event.EventHandler", "progress_mouseexited", Null)
	jo.RunMethod("setOnMouseExited", Array(e))
	ProgressSlider.tag = False
	ProgressContextMenu.Initialize("ProgressContextMenu")
	SetTable
End Sub

private Sub SetTable
	LinesTable.HeaderFont = xui.CreateFont(fx.DefaultFont(15),15)
	LinesTable.HeadersHeight = 30dip
	LinesTable.RowHeight = 30dip
	Dim NumberColumn As B4XTableColumn = LinesTable.AddColumn("No.", LinesTable.COLUMN_TYPE_TEXT)
	NumberColumn.Width = 80dip
	NumberColumn.Sortable = False
	StartColumn = LinesTable.AddColumn("Start", LinesTable.COLUMN_TYPE_TEXT)
	StartColumn.Width = 105dip
	StartColumn.Sortable = False
	EndColumn = LinesTable.AddColumn("End", LinesTable.COLUMN_TYPE_TEXT)
	EndColumn.Width = 105dip
	EndColumn.Sortable = False
	SourceColumn = LinesTable.AddColumn("Source", LinesTable.COLUMN_TYPE_TEXT)
	SourceColumn.Sortable = False
	TargetColumn = LinesTable.AddColumn("Target", LinesTable.COLUMN_TYPE_TEXT)
	TargetColumn.Sortable = False
	LinesTable.SearchVisible = False
	LinesTable.SelectionColor = xui.Color_Transparent
End Sub

Private Sub GetTimeLabelText(totalSeconds As Long) As String
	Dim minutes As Int =  Floor(totalSeconds / 60)
	Dim seconds As Int = totalSeconds - minutes*60
	Return NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Private Sub MenuBar1_Action
	Dim mi As MenuItem = Sender
	Select mi.Text
		Case "_Open Media File"
			OpenFile
		Case "_Save"
			Save
		Case "_Close"
			Close
		Case "_Recognize Speech"
			RecognizeSpeech
		Case "_Exit"
			ExitApp
		Case "_About"
			fx.Msgbox(MainForm,"@xulihang, 2024","Silhouette")
	End Select
End Sub

Private Sub RecognizeSpeech
	If currentProject.IsInitialized=False Then
		Return
	End If
	
	Dim parent As String = currentProject.GetMediaFolder
	Dim filename As String = currentProject.GetMediaFilename
	Dim dir As String = currentProject.GetTmpFolder

	If File.Exists(dir,"audio.wav") = False Then
		Dim outpath As String = File.Combine(dir,"audio.wav")
		Log("convert video to wav...")
		Wait For (FFMpeg.Video2Wav(parent,filename,outpath)) Complete (done As Object)
		Log("convert video to wav done")
	End If
	If File.Exists(dir,"segnemnt-00001.wav") = False Then
		Log("split wav...")
		Wait For (FFMpeg.SplitWav(segmentLength,dir,"audio.wav")) Complete (done As Object)
		Log("split wav done")
	End If
	Dim files As List = File.ListFiles(dir)
	Dim wavFiles As List
	wavFiles.Initialize
	For Each filename As String In files
		If filename.StartsWith("segment") And filename.EndsWith(".wav") Then
			wavFiles.Add(filename)
		End If
	Next
	Dim index As Int = 1
	For Each filename As String In wavFiles
		Log(index & "/" & wavFiles.Size)
		Dim purename As String = Utils.GetFilenameWithoutExtension(filename)
		If File.Exists(dir,purename&".srt") = False Then
			Dim wavpath As String = File.Combine(dir,filename)
			Wait For (ASR.RecognizeWav(wavpath,"ja")) Complete (done As Object)
		End If
		index = index + 1
	Next
	LoadSRTToProject
	LoadLinesToTable
End Sub

Private Sub LoadSRTToProject
	Dim parser As SrtParser
	parser.Initialize
	Dim dir As String = currentProject.GetTmpFolder
	Dim files As List = File.ListFiles(dir)
	currentProject.Clear
	Dim index As Int = 0
	For Each filename As String In files
		Dim offsetMS As Int = index * segmentLength * 1000
		If filename.EndsWith(".srt") Then
			Dim content As String = File.ReadString(dir,filename)
			content = Utils.RemoveBOM(content)
			Dim lines As List = parser.Parse(content)
			For Each line As SpeechLine In lines
				Dim startTime As String = Utils.ShiftTimeString(line.startTime,offsetMS)
				Dim endTime As String = Utils.ShiftTimeString(line.endTime,offsetMS)
				currentProject.AddLine(startTime,endTime,line.text,"")
			Next
			index = index + 1
		End If
	Next
End Sub

Private Sub LoadLinesToTable
	Dim data As List
	data.Initialize
	Dim index As Int = 0
	For Each line As Map In currentProject.lines
		index = index + 1
		Dim row(5) As String
		row(0) = index.As(String)
		row(1) = line.Get("startTime")
		row(2) = line.Get("endTime")
		row(3) = line.Get("source")
		row(4) = line.Get("target")
		data.Add(row)
	Next
	LinesTable.SetData(data)
End Sub

Sub LinesTable_CellClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,xui.Color_RGB(119,198,255))
End Sub

Sub LinesTable_CellLongClicked (ColumnId As String, RowId As Long)
	SelectRow(RowId,xui.Color_RGB(119,198,255))
	Dim col As B4XTableColumn = LinesTable.GetColumn(ColumnId)
	Dim i As Int = LinesTable.VisibleRowIds.IndexOf(RowId)
	Dim cell As B4XView = col.CellsLayouts.Get(i)
	Dim jo As JavaObject = tableCM '<--------------------------- global ContextMenu object
	Dim x As Double = robot.RunMethod("getMouseX",Null)' <----- global JavaObject object
	Dim y As Double = robot.RunMethod("getMouseY",Null)
	jo.RunMethod("show", Array(cell, x, y))
End Sub

Sub SelectRow(targetRowId As Int, color As Int)    'rowid-1
	For i = 0 To LinesTable.VisibleRowIds.Size - 1
		Dim RowId As Long = LinesTable.VisibleRowIds.Get(i)
		For Each c As B4XTableColumn In LinesTable.Columns
			Dim pnl As B4XView = c.CellsLayouts.Get(i+1)
			If RowId = targetRowId Then
				pnl.Color=color
			Else
				If i Mod 2 = 0 Then
					pnl.Color = LinesTable.EvenRowColor
				Else
					pnl.Color = LinesTable.OddRowColor
				End If
			End If
		Next
	Next
	selectedRowID = targetRowId
	LoadLineToEditor
End Sub

Private Sub Save
	If currentProject.IsInitialized Then
		currentProject.save
	End If
End Sub

Private Sub Close
	StopPlaying
	LinesTable.SetData(Array())
	currentProject = Null
End Sub

Private Sub OpenFile
	Dim fc As FileChooser
	fc.Initialize
	Dim path As String = fc.ShowOpen(MainForm)
	If File.Exists(path,"") Then
		currentProject.Initialize(path)
		PlayFile(path)
		LoadLinesToTable
	End If
End Sub

Private Sub PlayFile(path As String)
	If vlc.IsPlaying Then
		vlc.Stop
	End If
	ProgressSlider.tag = False
	ProgressSlider.Value = 0
	vlc.Play(path)
	Sleep(0)
	ProgressSlider.tag = True
	Do While vlc.IsPlaying == False
		Sleep(100)
	Loop
	TogglePlayingStatus(True)
	Dim time As Long = vlc.GetLength / 1000
	Dim minutes As Int =  Floor(time / 60)
	Dim seconds As Int = time - minutes*60
	TotalTimeLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
End Sub

Sub Progress_MouseExited_Event (MethodName As String, Args() As Object) As Object
	ProgressContextMenu.MenuItems.Clear
	Return Null
End Sub

Sub Progress_MouseClicked_Event (MethodName As String, Args() As Object) As ResumableSub
	If vlc.IsPlayable = False Then
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	ProgressSlider.Enabled = False
	ProgressSlider.Value = percent * 100
	vlc.SetPosition(percent)
	ProgressContextMenu.MenuItems.Clear
	e.Consume
	Sleep(0)
	ProgressSlider.Enabled = True
	Return Null
End Sub

Sub Progress_MouseMoved_Event (MethodName As String, Args() As Object) As Object
	If vlc.IsPlayable = False Then
		Return Null
	End If
	Dim e As MouseEvent = Args(0)
	Dim percent As Double = e.X / ProgressSlider.Width
	Dim time As Long = percent * vlc.GetLength / 1000
	ProgressContextMenu.MenuItems.Clear
	Dim mi As MenuItem
	mi.Initialize(GetTimeLabelText(time),"")
	ProgressContextMenu.MenuItems.Add(mi)
	Dim map1 As Map
	map1=Utils.GetScreenPosition(ProgressSlider)
	Dim jo As JavaObject = ProgressContextMenu
	jo.RunMethod("show", Array(ProgressSlider, map1.Get("x")+e.X, map1.Get("y")-40))
	Return Null
End Sub

Private Sub VLCPane_Resize (Width As Double, Height As Double)
	Dim n As Node = VLCPane.GetNode(0)
	n.PrefWidth = Width
	n.PrefHeight = Height
End Sub

Private Sub ExitApp
	vlc.stop
	vlc.release
	ExitApplication
End Sub

Private Sub VolSlider_ValueChange (Value As Double)
	vlc.SetVolume(Value)
End Sub

Private Sub StopButton_MouseClicked (EventData As MouseEvent)
	StopPlaying
End Sub

Private Sub StopPlaying
	vlc.Stop
	TogglePlayingStatus(False)
End Sub

Private Sub PlayButton_MouseClicked (EventData As MouseEvent)
	If vlc.IsPlaying Then
		vlc.Pause
		TogglePlayingStatus(False)
	Else
		GetMediaPlayer.RunMethod("play",Null)
		TogglePlayingStatus(True)
	End If
End Sub

private Sub GetMediaPlayer As JavaObject
	Dim jo As JavaObject=vlc.player
	Dim mp As JavaObject=jo.RunMethod("getMp",Null)
	Return mp
End Sub

Private Sub TogglePlayingStatus(isPlaying As Boolean)
	If isPlaying Then
		PlayButton.Text = ""
		ProgressTimer.Enabled = True
	Else
		PlayButton.Text = ""
		ProgressTimer.Enabled = False
	End If
End Sub

Private Sub ProgressTimer_Tick
	If vlc.IsPlaying Then
		If vlc.GetPosition*vlc.GetLength > expectedEndTime And expectedEndTime<>-1 Then
			expectedEndTime = -1
			vlc.Pause
			TogglePlayingStatus(False)
		End If
		ProgressSlider.Tag = False
		Dim time As Long = vlc.GetTime / 1000
		Dim minutes As Int = Floor(time / 60)
		Dim seconds As Int = time - minutes*60
		ProgressLabel.Text = NumberFormat(minutes,2,0) & ":" & NumberFormat(seconds,2,0)
		ProgressSlider.Value = vlc.GetTime/vlc.GetLength * 100
		Sleep(0)
		ProgressSlider.Tag = True
	End If
End Sub

Sub MainForm_CloseRequest (EventData As Event)
	Log("We are closing the mainform")
	vlc.stop
	vlc.release
End Sub

Private Sub tableMenuItem_Action
	Dim mi As MenuItem = Sender
	Select mi.Text
	    Case "Play this line"
			PlayTheSelectedLine
		Case "Prepend a line"
			PrependLine
		Case "Append a line"
			AppendLine
		Case "Delete this line"
			currentProject.DeleteLine(selectedRowID - 1)
			LoadLinesToTable
	End Select
End Sub

Private Sub PrependLine
	currentProject.PrependLine(selectedRowID - 1)
	LoadLinesToTable
End Sub

Private Sub AppendLine
	currentProject.AppendLine(selectedRowID - 1)
	LoadLinesToTable
End Sub

Private Sub PlayTheSelectedLine
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	Dim startTime As Int = Utils.GetMillisecondsFromTimeString(line.Get("startTime"))
	expectedEndTime = Utils.GetMillisecondsFromTimeString(line.Get("endTime"))
	GetMediaPlayer.RunMethod("play",Null)
	vlc.SetPosition(startTime / vlc.GetLength)
	TogglePlayingStatus(True)
End Sub

Private Sub LoadLineToEditor
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	SourceTextArea.Text = line.Get("source")
	TargetTextArea.Text = line.Get("target")
	StartTimeTextField.Text = line.Get("startTime")
	EndTimeTextField.Text = line.Get("endTime")
End Sub

Private Sub UpdateTime(isStartTime As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isStartTime Then
		line.Put("startTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${StartColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("endTime",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${EndColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
End Sub

Private Sub UpdateText(isSource As Boolean,new As String)
	If currentProject <> Null And currentProject.IsInitialized = False Then
		Return
	End If
	
	Dim line As Map = currentProject.GetLine(selectedRowID - 1)
	If isSource Then
		line.Put("source",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${SourceColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	Else
		line.Put("target",new)
		LinesTable.sql1.ExecNonQuery2($"UPDATE data SET ${TargetColumn.SQLID} = ? WHERE rowid = ?"$, Array As String(new, selectedRowID))
	End If
	LinesTable.Refresh
End Sub

Private Sub SourceTextArea_TextChanged (Old As String, New As String)
	UpdateText(True,New)
End Sub

Private Sub TargetTextArea_TextChanged (Old As String, New As String)
	UpdateText(False,New)
End Sub

Private Sub StartTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(True,New)
End Sub

Private Sub EndTimeTextField_TextChanged (Old As String, New As String)
	UpdateTime(False,New)
End Sub

Private Sub UseCurrentTimeButton_MouseClicked (EventData As MouseEvent)
	If focusedTimeTextField.IsInitialized Then
		focusedTimeTextField.Text = Utils.GetTimeStringFromMilliseconds(vlc.GetTime)
	End If
End Sub

Private Sub StartTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = StartTimeTextField
	End If
End Sub

Private Sub EndTimeTextField_FocusChanged (HasFocus As Boolean)
	If HasFocus Then
		focusedTimeTextField = EndTimeTextField
	End If
End Sub